/*BASE DE DATOS*/
USE GD2C2017;
GO

/* ESQUEMA */
CREATE SCHEMA SUBSELECT AUTHORIZATION GD;
GO

/**************/
/* SECUENCIAS */
/**************/

CREATE SEQUENCE SUBSELECT.REDENCION_SEQ AS INT START WITH 35000 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.ITEM_PAGO_SEQ AS INT START WITH 19500 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.ITEM_FORMA_PAGO_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.ITEM_FACTURA_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.FACTURA_SEQ AS INT START WITH 32000 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.SUCURSAL_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.PERSONA_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.EMPRESA_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.DEVOLUION_SEQ AS INT START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SUBSELECT.RUBRO_SEQ AS INT START WITH 2 INCREMENT BY 1;



/**********/
/* TABLAS */
/**********/

CREATE TABLE SUBSELECT.CLIENTE
(
		ID_CLIENTE INT NOT NULL PRIMARY KEY,
		NOMBRE VARCHAR(255) NOT NULL,
		APELLIDO VARCHAR(255) NOT NULL,
		DNI  NUMERIC(18,0) NOT NULL,
		DIRECCION VARCHAR(255) NOT NULL,
		TELEFONO NUMERIC(18,0) NOT NULL,
		MAIL VARCHAR(255) NOT NULL UNIQUE,
		F_NACIMIENTO DATETIME NOT NULL,
		CODIGO_POSTAL VARCHAR (255) NOT NULL,
		ACTIVO BIT NOT NULL DEFAULT 1
);

CREATE TABLE SUBSELECT.SUCURSAL
(
		ID_SUCURSAL INT NOT NULL PRIMARY KEY,
		NOMBRE VARCHAR(50) NOT NULL,
		DIRECCION VARCHAR(50) NOT NULL,
		CODIGO_POSTAL NUMERIC(18,0) NOT NULL UNIQUE,
		ACTIVO BIT NOT NULL DEFAULT 1
);


CREATE TABLE SUBSELECT.RUBRO
(
		ID_RUBRO NUMERIC (18,0) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255) NOT NULL
);



CREATE TABLE SUBSELECT.EMPRESA
(
		ID_EMPRESA INT NOT NULL PRIMARY KEY,
		NOMBRE VARCHAR(255) NOT NULL,
		CUIT VARCHAR(50) NOT NULL UNIQUE,
		DIRECCION VARCHAR(255) NOT NULL,
		ID_RUBRO NUMERIC(18,0) NOT NULL,
		ACTIVO BIT NOT NULL DEFAULT 1

		CONSTRAINT FK_EMPRESA_RUBRO FOREIGN KEY (ID_RUBRO) REFERENCES SUBSELECT.RUBRO(ID_RUBRO)
);



CREATE TABLE SUBSELECT.FACTURA
(
		NRO_FACTURA NUMERIC (18,0) NOT NULL PRIMARY KEY,
		ID_CLIENTE INT NOT NULL,
		ID_EMPRESA INT NOT NULL,
		FECHA DATETIME NOT NULL,
		FECHA_VENCIMIENTO DATETIME NOT NULL,
		TOTAL NUMERIC (18,2) NOT NULL

		CONSTRAINT FK_FACTURA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES SUBSELECT.CLIENTE(ID_CLIENTE),
		CONSTRAINT FK_FACTURA_EMPRESA FOREIGN KEY (ID_EMPRESA) REFERENCES SUBSELECT.EMPRESA(ID_EMPRESA)
);

CREATE TABLE SUBSELECT.ITEM
(
		ID_ITEM INT NOT NULL,
		NRO_FACTURA NUMERIC (18,0) NOT NULL,
		CANTIDAD NUMERIC (18,0) NOT NULL,
		MONTO NUMERIC (18,2) NOT NULL

		CONSTRAINT PK_ITEM_FACTURA PRIMARY KEY (ID_ITEM,NRO_FACTURA),
		CONSTRAINT FK_TURNO FOREIGN KEY (NRO_FACTURA) REFERENCES SUBSELECT.FACTURA (NRO_FACTURA)
);


CREATE TABLE SUBSELECT.FORMA_PAGO
(
	ID_FORMA_PAGO INT NOT NULL PRIMARY KEY,
	DESCRIPCION VARCHAR(255)
)

CREATE TABLE SUBSELECT.PAGO
(
	NRO_PAGO NUMERIC(18,0) NOT NULL PRIMARY KEY,
	FECHA DATETIME NOT NULL,
	TOTAL NUMERIC(18,2) NOT NULL,
	ID_FORMA_PAGO INT NOT NULL,
	ID_SUCURSAL INT NOT NULL,
	ID_CLIENTE INT NOT NULL,
	ID_EMPRESA INT NOT NULL, 
	ITEM_PAGO NUMERIC(18,2)

	CONSTRAINT FK_PAGO_FORMA_PAGO FOREIGN KEY (ID_FORMA_PAGO) REFERENCES SUBSELECT.FORMA_PAGO (ID_FORMA_PAGO),
	CONSTRAINT FK_PAGO_SUCURSAL FOREIGN KEY (ID_SUCURSAL) REFERENCES SUBSELECT.SUCURSAL (ID_SUCURSAL),
	CONSTRAINT FK_PAGO_EMPRESA FOREIGN KEY (ID_EMPRESA) REFERENCES SUBSELECT.EMPRESA (ID_EMPRESA),
	CONSTRAINT FK_PAGO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES SUBSELECT.CLIENTE (ID_CLIENTE)
);


CREATE TABLE SUBSELECT.PAGO_FACTURAS
(
		NRO_PAGO NUMERIC(18,0) NOT NULL,
		NRO_FACTURA NUMERIC (18,0) NOT NULL,
		
		CONSTRAINT PK_PAGO_FACTURAS PRIMARY KEY (NRO_PAGO,NRO_FACTURA),
		CONSTRAINT FK_PAGO_FACTURAS_NRO_PAGO FOREIGN KEY (NRO_PAGO) REFERENCES SUBSELECT.PAGO(NRO_PAGO),
		CONSTRAINT FK_PAGO_FACTURAS_NRO_FACTURA FOREIGN KEY (NRO_FACTURA) REFERENCES SUBSELECT.FACTURA(NRO_FACTURA)
);


CREATE TABLE SUBSELECT.REDENCION
(
		NRO_REDENCION NUMERIC (18,0) NOT NULL PRIMARY KEY,
		FECHA_REDENCION DATETIME NOT NULL,
		ID_EMPRESA INT NOT NULL,
		ITEM NUMERIC (18,0) NOT NULL,
		TOTAL NUMERIC (18,2) NOT NULL,
		PORCENTAJE NUMERIC (5,2) NOT NULL,
		COMISION NUMERIC (18,2) NOT NULL,
		CANTIDAD NUMERIC (18,2) NOT NULL,
		
		CONSTRAINT FK_REDENCION_EMPRESA FOREIGN KEY (ID_EMPRESA) REFERENCES SUBSELECT.EMPRESA(ID_EMPRESA)
);

CREATE TABLE SUBSELECT.REDENCION_FACTURA
(
		NRO_REDENCION NUMERIC (18,0) NOT NULL,
		NRO_FACTURA NUMERIC (18,0) NOT NULL,
		
		CONSTRAINT PK_REDENCION_FACTURA PRIMARY KEY (NRO_REDENCION,NRO_FACTURA),
		CONSTRAINT FK_REDENCION_FACTURA_NRO_REDENCION FOREIGN KEY (NRO_REDENCION) REFERENCES SUBSELECT.REDENCION(NRO_REDENCION),
		CONSTRAINT FK_REDENCION_FACTURA__FACTURA FOREIGN KEY (NRO_FACTURA) REFERENCES SUBSELECT.FACTURA(NRO_FACTURA)
);


CREATE TABLE SUBSELECT.DEVOLUCION
(
		ID_DEVOLUCION INT NOT NULL PRIMARY KEY,
		MOTIVO VARCHAR(255) NOT NULL
);

CREATE TABLE SUBSELECT.DEVOLUCION_FACTURA
(
		ID_DEVOLUCION INT NOT NULL,
		NRO_FACTURA NUMERIC (18,0) NOT NULL,
		
		CONSTRAINT PK_DEVOLUCION_FACTURA PRIMARY KEY (ID_DEVOLUCION,NRO_FACTURA),
		CONSTRAINT FK_DEVOLUCION_FACTURA_DEVOLUCION FOREIGN KEY (ID_DEVOLUCION) REFERENCES SUBSELECT.DEVOLUCION(ID_DEVOLUCION),
		CONSTRAINT FK_DEVOLUCION_FACTURA_NRO_FACTURA FOREIGN KEY (NRO_FACTURA) REFERENCES SUBSELECT.FACTURA(NRO_FACTURA)
);

CREATE TABLE SUBSELECT.DEVOLUCION_REDENCION
(
		ID_DEVOLUCION INT NOT NULL,
		NRO_REDENCION NUMERIC (18,0) NOT NULL,
		
		CONSTRAINT PK_DEVOLUCION_REDENCION PRIMARY KEY (NRO_REDENCION,ID_DEVOLUCION ),
		CONSTRAINT FK_DEVOLUCION_REDENCION_NRO_REDENCION FOREIGN KEY (NRO_REDENCION) REFERENCES SUBSELECT.REDENCION(NRO_REDENCION),
		CONSTRAINT FK_DEVOLUCION_REDENCION_ID_DEVOLUCION  FOREIGN KEY (ID_DEVOLUCION ) REFERENCES SUBSELECT.DEVOLUCION(ID_DEVOLUCION )
);





CREATE TABLE SUBSELECT.FUNCIONALIDAD
(
		ID_FUNCIONALIDAD INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255),
);

CREATE TABLE SUBSELECT.ROL
(
		ID_ROL INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		DESCRIPCION VARCHAR(255) NULL,
		ACTIVO BIT NOT NULL
);

CREATE TABLE SUBSELECT.USUARIO
(
		ID_USUARIO INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
		ID_PERSONA INT NOT NULL,
		USERNAME VARCHAR(255) NOT NULL,
		PASSWORD NVARCHAR(255) NOT NULL,
		INTENTOS INT NOT NULL DEFAULT 0,
		ACTIVO BIT NOT NULL DEFAULT 1,
		
		CONSTRAINT FK_USUARIO_PERSONA FOREIGN KEY(ID_PERSONA) REFERENCES SUBSELECT.CLIENTE(ID_CLIENTE)
);

CREATE TABLE SUBSELECT.USUARIO_ROL
(
		ID_USUARIO INT NOT NULL,
		ID_ROL INT NOT NULL,
		
		CONSTRAINT PK_USUARIO_ROL PRIMARY KEY (ID_USUARIO,ID_ROL),
		CONSTRAINT FK_USUARIO_ROL_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES SUBSELECT.USUARIO(ID_USUARIO),
		CONSTRAINT FK_USUARIO_ROL_ROL FOREIGN KEY (ID_ROL) REFERENCES SUBSELECT.ROL(ID_ROL)
);

CREATE TABLE SUBSELECT.ROL_FUNCIONALIDAD
(
		ID_ROL INT NOT NULL,
		ID_FUNCIONALIDAD INT NOT NULL,
		
		CONSTRAINT PK_ROL_FUNCIONALIDAD PRIMARY KEY (ID_ROL,ID_FUNCIONALIDAD),
		CONSTRAINT FK_ROL_FUNCIONALIDAD_ROL FOREIGN KEY (ID_ROL) REFERENCES SUBSELECT.ROL(ID_ROL),
		CONSTRAINT FK_ROL_FUNCIONALIDAD_FUNCIONALIDAD FOREIGN KEY (ID_FUNCIONALIDAD) REFERENCES SUBSELECT.FUNCIONALIDAD(ID_FUNCIONALIDAD)
);

CREATE TABLE SUBSELECT.USUARIO_SUCURSAL
(
		ID_SUCURSAL INT NOT NULL,
		ID_USUARIO INT NOT NULL,
		
		CONSTRAINT PK_USUARIO_SUCURSAL PRIMARY KEY (ID_SUCURSAL,ID_USUARIO),
		CONSTRAINT FK_USUARIO_SUCURSAL_ID_SUCURSAL FOREIGN KEY (ID_SUCURSAL) REFERENCES SUBSELECT.SUCURSAL(ID_SUCURSAL),
		CONSTRAINT FK_USUARIO_SUCURSAL_ID_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES SUBSELECT.USUARIO(ID_USUARIO)
);


/***********************/
/*      FUNCIONES      */
/***********************/
GO

CREATE FUNCTION SUBSELECT.PASSWORD_HASH(@PASSWORD NVARCHAR(255))
	RETURNS NVARCHAR(255)
	
	BEGIN
		RETURN HASHBYTES('SHA2_256',@PASSWORD)
	END;

GO

CREATE FUNCTION SUBSELECT.TRIM(@STRING VARCHAR(255))
	RETURNS VARCHAR(255)

	BEGIN
		RETURN LTRIM(RTRIM(@STRING))
	END;

GO

GO
CREATE FUNCTION SUBSELECT.REMAIL(@MAIL VARCHAR(255), @DNI NUMERIC(18,0))
	RETURNS VARCHAR(255)
	BEGIN
		RETURN (SUBSTRING(@MAIL,0,CHARINDEX('@',@MAIL))) + CONVERT(VARCHAR(18),@DNI) + (SUBSTRING(@MAIL,CHARINDEX('@',@MAIL),LEN(@MAIL)));
	END;
GO



/*INSERTAR DATOS FIJOS*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_INSERT_DATOS_FIJOS
AS
BEGIN
	
	
	INSERT INTO SUBSELECT.ROL(DESCRIPCION,ACTIVO)
	VALUES
	('ADMINISTRADORES',1),
	('COBRADORES',1),
	('CLIENTES',1),
	('ADMINISTRADOR GENERAL',1);
	
	
	INSERT INTO SUBSELECT.FUNCIONALIDAD(DESCRIPCION)
	VALUES
	('Clientes'),
	('Empresas'),
	('AltaFactura'),
	('Roles'),
	('Sucursales'),
	('ListadoEstadistico'),
	('Pagos'),
	('Rendiciones'),
	('Devolucion Factura'),
	('Devolucion Rendicion');
	
	/*SUBSELECT.ROL_FUNCIONALIDAD*/
	DECLARE @ID_ROL INT;
	DECLARE @ID_USUARIO INT;
	
	/*FUNCIONALIDADES DEL ROL ADMINISTRATIVO*/
	SELECT @ID_ROL = ID_ROL FROM SUBSELECT.ROL WHERE DESCRIPCION='ADMINISTRADORES';
	INSERT INTO SUBSELECT.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Clientes')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Empresas')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='AltaFactura')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Roles')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Sucursales')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='ListadoEstadistico')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Pagos')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Rendiciones')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Devolucion Factura')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Devolucion Rendicion'));
	
	/*FUNCIONALIDADES DEL ROL AFILIADO*/
	SELECT @ID_ROL = ID_ROL FROM SUBSELECT.ROL WHERE DESCRIPCION='CLIENTES';
	INSERT INTO SUBSELECT.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Clientes'));
	
	/*FUNCIONALIDADES DEL ROL PROFESIONAL*/
	SELECT @ID_ROL = ID_ROL FROM SUBSELECT.ROL WHERE DESCRIPCION='COBRADORES';
	INSERT INTO SUBSELECT.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Clientes')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Empresas')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='AltaFactura')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Roles')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Sucursales')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Pagos')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Rendiciones')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Devolucion Factura'));
	
	/*FUNCIONALIDADES DEL ROL ADMINISTRADOR GENERAL*/
	SELECT @ID_ROL = ID_ROL FROM SUBSELECT.ROL WHERE DESCRIPCION='ADMINISTRADOR GENERAL';
	INSERT INTO SUBSELECT.ROL_FUNCIONALIDAD(ID_ROL,ID_FUNCIONALIDAD)
	VALUES
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Clientes')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION = 'Empresas')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='AltaFactura')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Roles')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Sucursales')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='ListadoEstadistico')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Pagos')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Rendiciones')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Devolucion Factura')),
	(@ID_ROL,(SELECT ID_FUNCIONALIDAD FROM SUBSELECT.FUNCIONALIDAD WHERE DESCRIPCION ='Devolucion Rendicion'));
	
	/*USUARIOS ADMINISTRATIVOS (FUNCIONALIDADES CORRESPONDIENTRES PARA ROL ADMINISTRATIVO*/
	INSERT INTO SUBSELECT.CLIENTE(ID_CLIENTE,NOMBRE,APELLIDO,DNI,DIRECCION,TELEFONO,MAIL,F_NACIMIENTO,CODIGO_POSTAL)
	VALUES (NEXT VALUE FOR SUBSELECT.PERSONA_SEQ,'Juan','Salto',34358981,'Medrano',45814383,'juansalto754@hotmail.com','01-02-16','1416');
	
	INSERT INTO SUBSELECT.USUARIO (ID_PERSONA,USERNAME,PASSWORD)
	VALUES ((SELECT ID_CLIENTE FROM SUBSELECT.CLIENTE WHERE NOMBRE='Juan' AND APELLIDO = 'Salto' AND DNI = 34358981 ),'administrativo1',SUBSELECT.PASSWORD_HASH('w23e'));
	
	SELECT @ID_USUARIO = ID_USUARIO
	FROM SUBSELECT.USUARIO
	WHERE USERNAME='administrativo1';
	
	INSERT INTO SUBSELECT.USUARIO_ROL
	VALUES (@ID_USUARIO,(SELECT TOP 1 ID_ROL FROM SUBSELECT.ROL WHERE DESCRIPCION='ADMINISTRADORES'));
	
	/*USUARIO ADMINISTRADOR (TODAS LAS FUNCIONALIDADES)*/
		
	INSERT INTO SUBSELECT.CLIENTE(ID_CLIENTE,NOMBRE,APELLIDO,DNI,DIRECCION,TELEFONO,MAIL,F_NACIMIENTO,CODIGO_POSTAL)
	VALUES (0,'ADMINISTRADOR GENERAL','ADMINISTRADOR GENERAL',00000000,'NO TIENE',00000000,'MAIL','01-02-16','0000');
	
	INSERT INTO SUBSELECT.USUARIO (ID_PERSONA,USERNAME,PASSWORD)
	VALUES (0,'admin',SUBSELECT.PASSWORD_HASH('w23e'));
	
	SELECT @ID_USUARIO=ID_USUARIO
	FROM SUBSELECT.USUARIO 
	WHERE USERNAME = 'admin';
		
	INSERT INTO USUARIO_ROL
	VALUES (@ID_USUARIO,@ID_ROL);

END;

GO

EXEC SUBSELECT.SP_MIGRACION_INSERT_DATOS_FIJOS;

GO



/*MIGRAR CLIENTES*/

CREATE PROCEDURE SUBSELECT.SP_MIGRACION_CLIENTES
AS
BEGIN
	DECLARE @MIGRA_CLIENTES TABLE
	(
		NOMBRE VARCHAR(255) NULL,
		APELLIDO VARCHAR(255) NULL,
		NRO_DOCUMENTO NUMERIC(18,0) NULL,
		DIRECCION VARCHAR(255) NULL,
		TELEFONO NUMERIC(18,0) NULL DEFAULT 0,
		E_MAIL VARCHAR(255) NULL,
		F_NACIMIENTO DATETIME NULL,
		CODIGO_POSTAL VARCHAR(255)
	);

	DECLARE @MIGRA_CLIENTES_MAILS_REPETIDOS TABLE
	(
		E_MAIL VARCHAR(255) NULL
	);
		
	INSERT INTO @MIGRA_CLIENTES
	(E_MAIL,NOMBRE,APELLIDO,NRO_DOCUMENTO,DIRECCION,F_NACIMIENTO,CODIGO_POSTAL)
	SELECT DISTINCT  (Cliente_Mail), [Cliente-Nombre], [Cliente-Apellido],[Cliente-Dni], Cliente_Direccion, [Cliente-Fecha_Nac], Cliente_Codigo_Postal
	FROM GD_ESQUEMA.MAESTRA WHERE Cliente_Mail IS NOT NULL;

	INSERT INTO @MIGRA_CLIENTES_MAILS_REPETIDOS
	(E_MAIL)
	SELECT T.E_MAIL FROM
	(SELECT COUNT(*) CANTIDAD, E_MAIL FROM @MIGRA_CLIENTES GROUP BY E_MAIL) T WHERE T.CANTIDAD > 1;

	UPDATE @MIGRA_CLIENTES SET E_MAIL = SUBSELECT.REMAIL(E_MAIL,NRO_DOCUMENTO) WHERE E_MAIL IN(SELECT * FROM @MIGRA_CLIENTES_MAILS_REPETIDOS);

	INSERT INTO SUBSELECT.CLIENTE
	(ID_CLIENTE,NOMBRE,APELLIDO,DNI,DIRECCION,TELEFONO,MAIL,F_NACIMIENTO,CODIGO_POSTAL)
	SELECT NEXT VALUE FOR SUBSELECT.PERSONA_SEQ,NOMBRE,APELLIDO,NRO_DOCUMENTO,DIRECCION,TELEFONO,E_MAIL,F_NACIMIENTO,CODIGO_POSTAL 
	FROM @MIGRA_CLIENTES;
	
	
	/*USUARIO CLIENTE (FUNCIONALIDADES CORRESPONDIENTES AL ROL CLIENTE)*/

	INSERT INTO SUBSELECT.USUARIO
	(ID_PERSONA,USERNAME,PASSWORD)
	SELECT ID_CLIENTE,'CLIENTE' + CONVERT(VARCHAR(10),ID_CLIENTE),SUBSELECT.PASSWORD_HASH('w23e') 
	FROM SUBSELECT.CLIENTE;
		
	INSERT INTO SUBSELECT.USUARIO_ROL
	(ID_USUARIO,ID_ROL)
	SELECT ID_USUARIO, 2
	FROM SUBSELECT.USUARIO U
	INNER JOIN SUBSELECT.CLIENTE C
			ON U.ID_PERSONA = C.ID_CLIENTE
	WHERE U.ID_USUARIO > 2;
	
END;
GO

EXEC SUBSELECT.SP_MIGRACION_CLIENTES;
		
GO


/*MIGRAR EMPRESA*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_EMPRESA
AS
BEGIN
	DECLARE @MIGRA_EMPRESA TABLE
	(
		CUIT VARCHAR(50) NULL,
		DIRECCION VARCHAR(255) NULL,
		NOMBRE VARCHAR(255) NULL,
		RUBRO NUMERIC(18,0) NULL,
		RUBRO_DESCRIPCION VARCHAR (255) NULL
	);

		DECLARE @MIGRA_RUBRO TABLE
	(
		RUBRO NUMERIC(18,0) NULL,
		RUBRO_DESCRIPCION VARCHAR (255) NULL
	);


	INSERT INTO @MIGRA_EMPRESA
	(CUIT,DIRECCION,NOMBRE,RUBRO,RUBRO_DESCRIPCION)
	SELECT DISTINCT  (Empresa_Cuit), Empresa_Direccion, Empresa_Nombre,Empresa_Rubro, Rubro_Descripcion
	FROM GD_ESQUEMA.MAESTRA WHERE Empresa_Cuit IS NOT NULL;

	INSERT INTO @MIGRA_RUBRO
	(RUBRO,RUBRO_DESCRIPCION)
	SELECT DISTINCT  (Empresa_Rubro), Rubro_Descripcion
	FROM GD_ESQUEMA.MAESTRA WHERE Empresa_Rubro IS NOT NULL;

	INSERT INTO SUBSELECT.RUBRO
	(ID_RUBRO,DESCRIPCION)
	SELECT RUBRO,RUBRO_DESCRIPCION 
	FROM @MIGRA_RUBRO;

	INSERT INTO SUBSELECT.EMPRESA
	(ID_EMPRESA,CUIT,DIRECCION,NOMBRE,ID_RUBRO)
	SELECT NEXT VALUE FOR SUBSELECT.EMPRESA_SEQ,CUIT,DIRECCION,NOMBRE,RUBRO 
	FROM @MIGRA_EMPRESA;	
END;
GO

EXEC SUBSELECT.SP_MIGRACION_EMPRESA;
		
GO


/*MIGRAR SUCURSAL*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_SUCURSAL
AS
BEGIN
	DECLARE @MIGRA_SUCURSAL TABLE
	(
		CODIGO_POSTAL NUMERIC(18,0) NULL,
		NOMBRE VARCHAR(255) NULL,
		DIRECCION VARCHAR(255) NULL
	);


	INSERT INTO @MIGRA_SUCURSAL
	(CODIGO_POSTAL,NOMBRE,DIRECCION)
	SELECT DISTINCT  (Sucursal_Codigo_Postal), Sucursal_Nombre, Sucursal_Dirección
	FROM GD_ESQUEMA.MAESTRA WHERE Sucursal_Codigo_Postal IS NOT NULL;

	INSERT INTO SUBSELECT.SUCURSAL
	(ID_SUCURSAL,CODIGO_POSTAL,NOMBRE,DIRECCION)
	SELECT NEXT VALUE FOR SUBSELECT.SUCURSAL_SEQ,CODIGO_POSTAL,NOMBRE,DIRECCION 
	FROM @MIGRA_SUCURSAL;	

	INSERT INTO SUBSELECT.USUARIO_SUCURSAL
	(ID_USUARIO,ID_SUCURSAL)
	SELECT U.ID_USUARIO, S.ID_SUCURSAL 
		FROM SUBSELECT.SUCURSAL S, SUBSELECT.USUARIO U
END;
GO

EXEC SUBSELECT.SP_MIGRACION_SUCURSAL;
		
GO
		

/*MIGRAR FACTURA*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_FACTURA
AS
BEGIN
	DECLARE @MIGRA_FACTURA TABLE
	(
		NRO_FACTURA NUMERIC(18,0) NULL,
		FECHA DATETIME NULL,
		VENCIMIENTO DATETIME NULL,
		TOTAL NUMERIC(18,2) NULL,
		ID_CLIENTE INT NULL,
		ID_EMPRESA INT NULL
	);

	DECLARE @MIGRA_ITEM TABLE
	(
		NRO_FACTURA NUMERIC(18,0) NULL,
		CANTIDAD NUMERIC(18,0) NULL,
		TOTAL NUMERIC(18,2) NULL
	);


	INSERT INTO @MIGRA_FACTURA
	(NRO_FACTURA,FECHA,VENCIMIENTO,TOTAL,ID_CLIENTE,ID_EMPRESA)
	SELECT DISTINCT  (M.Nro_Factura), M.Factura_Fecha, M.Factura_Fecha_Vencimiento,M.Factura_Total, C.ID_CLIENTE, E.ID_EMPRESA
		FROM GD_ESQUEMA.MAESTRA M , SUBSELECT.CLIENTE C,SUBSELECT.EMPRESA E 
		WHERE E.CUIT = M.Empresa_Cuit AND C.DNI = M.[Cliente-Dni]
		AND  M.Nro_Factura IS NOT NULL;

	INSERT INTO @MIGRA_ITEM
	(NRO_FACTURA,TOTAL,CANTIDAD)
		SELECT  Nro_Factura, ItemFactura_Monto,ItemFactura_Cantidad 
		FROM gd_esquema.Maestra 
		WHERE  Nro_Factura IS NOT NULL and Pago_nro is null and Rendicion_Nro is null

	INSERT INTO SUBSELECT.FACTURA
	(NRO_FACTURA,FECHA,FECHA_VENCIMIENTO,TOTAL,ID_CLIENTE,ID_EMPRESA)
	SELECT NRO_FACTURA,FECHA,VENCIMIENTO,TOTAL,ID_CLIENTE,ID_EMPRESA
		FROM @MIGRA_FACTURA;	

	INSERT INTO SUBSELECT.ITEM
	(ID_ITEM,NRO_FACTURA,MONTO,CANTIDAD)
	SELECT NEXT VALUE FOR SUBSELECT.ITEM_FACTURA_SEQ,NRO_FACTURA,TOTAL,CANTIDAD 
		FROM @MIGRA_ITEM;	

END;
GO

EXEC SUBSELECT.SP_MIGRACION_FACTURA;
		
GO

/*MIGRAR PAGO*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_PAGO
AS
BEGIN
	DECLARE @MIGRA_PAGO TABLE
	(
		NRO_PAGO NUMERIC(18,0) NULL,
		FECHA DATETIME NULL,
		TOTAL NUMERIC(18,2) NULL,
		FORMA_PAGO INT NULL,
		ID_SUCURSAL INT NULL,
		ITEM_PAGO NUMERIC (18,0) NULL,
		ID_EMPRESA INT NULL,
		ID_CLIENTE INT NULL
	);

	DECLARE @MIGRA_FORMA_PAGO TABLE
	(
		DESCRIPCION VARCHAR(255) NULL
	);

	INSERT INTO @MIGRA_FORMA_PAGO
	(DESCRIPCION)
	SELECT DISTINCT M.FormaPagoDescripcion
			FROM GD_ESQUEMA.MAESTRA M 
			WHERE M.FormaPagoDescripcion IS NOT NULL;

	INSERT INTO SUBSELECT.FORMA_PAGO
	(ID_FORMA_PAGO,DESCRIPCION)
	SELECT NEXT VALUE FOR SUBSELECT.ITEM_FORMA_PAGO_SEQ , DESCRIPCION 
		FROM @MIGRA_FORMA_PAGO;	

	INSERT INTO @MIGRA_PAGO
	(NRO_PAGO,FECHA,ITEM_PAGO,TOTAL,FORMA_PAGO,ID_SUCURSAL, ID_CLIENTE, ID_EMPRESA)
	SELECT DISTINCT  (M.ItemPago_nro), M.Pago_Fecha, M.ItemPago_nro,M.Total, F.ID_FORMA_PAGO, S.ID_SUCURSAL, C.ID_CLIENTE, E.ID_EMPRESA
	FROM GD_ESQUEMA.MAESTRA M , SUBSELECT.SUCURSAL S, SUBSELECT.CLIENTE C, SUBSELECT.FORMA_PAGO F, SUBSELECT.EMPRESA E
	WHERE S.CODIGO_POSTAL = M.Sucursal_Codigo_Postal 
	AND M.[Cliente-Dni] = C.DNI
	AND  M.ItemPago_nro IS NOT NULL
	AND F.DESCRIPCION = M.FormaPagoDescripcion
	AND E.CUIT = M.Empresa_Cuit;

	INSERT INTO SUBSELECT.PAGO
	(NRO_PAGO,FECHA,TOTAL,ID_FORMA_PAGO,ID_SUCURSAL,ITEM_PAGO,ID_CLIENTE,ID_EMPRESA)
	SELECT NRO_PAGO,FECHA,TOTAL,FORMA_PAGO,ID_SUCURSAL,ITEM_PAGO,ID_CLIENTE,ID_EMPRESA
	FROM @MIGRA_PAGO;
	
	INSERT INTO SUBSELECT.PAGO_FACTURAS
	(NRO_PAGO,NRO_FACTURA)
	SELECT DISTINCT (M.Pago_nro), M.Nro_Factura 
		FROM GD_ESQUEMA.MAESTRA M 
		WHERE M.Pago_nro IS NOT NULL AND Nro_Factura IS NOT NULL

END;
GO

EXEC SUBSELECT.SP_MIGRACION_PAGO;
		
GO


/*MIGRAR REDENCION*/
CREATE PROCEDURE SUBSELECT.SP_MIGRACION_REDENCION
AS
BEGIN
	
	DECLARE @MIGRA_REDENCION TABLE
	(
		NRO_REDENCION NUMERIC(18,0) NULL,
		FECHA DATETIME NULL,
		ITEM_REDENCION NUMERIC (18,0) NULL,
		TOTAL NUMERIC(18,2) NULL,
		PORCENTAJE NUMERIC(5,2),
		COMISION NUMERIC(18,2) NULL,
		CANTIDAD NUMERIC (18,0) NULL,
		EMPRESA INT NULL 

	);

	INSERT INTO @MIGRA_REDENCION
	(NRO_REDENCION,FECHA,ITEM_REDENCION,EMPRESA,PORCENTAJE,CANTIDAD,COMISION,TOTAL)
	SELECT F.Rendicion_Nro, F.Rendicion_Fecha,F.ItemRendicion_nro, F.ID_EMPRESA, F.PORCENTAJE
				,COUNT(*) CANTIDAD,SUM(F.ItemRendicion_Importe) COMISION,SUM(F.Total) TOTAL FROM
		(SELECT M.Rendicion_Nro, M.Rendicion_Fecha,M.ItemRendicion_nro
			, M.ItemRendicion_Importe, M.Total, ((M.ItemRendicion_Importe/M.Total)*100) PORCENTAJE, E.ID_EMPRESA
				FROM gd_esquema.Maestra  M, SUBSELECT.EMPRESA E WHERE M.Rendicion_Nro IS NOT NULL AND E.CUIT = M.Empresa_Cuit 
				GROUP BY  M.Rendicion_Nro, M.Rendicion_Fecha,M.ItemRendicion_nro, M.ItemRendicion_Importe, M.Total, E.ID_EMPRESA) F
				GROUP BY F.Rendicion_Nro, F.Rendicion_Fecha,F.ItemRendicion_nro, F.ID_EMPRESA, F.PORCENTAJE

	INSERT INTO SUBSELECT.REDENCION
	(NRO_REDENCION,FECHA_REDENCION,ITEM,TOTAL,PORCENTAJE,COMISION,CANTIDAD, ID_EMPRESA)
	SELECT R.NRO_REDENCION,R.FECHA,R.ITEM_REDENCION,R.TOTAL,R.PORCENTAJE,R.COMISION,R.CANTIDAD,R.EMPRESA
	FROM @MIGRA_REDENCION R;
	
	INSERT INTO SUBSELECT.REDENCION_FACTURA
	(NRO_REDENCION,NRO_FACTURA)
	SELECT DISTINCT (M.Rendicion_Nro), M.Nro_Factura 
		FROM GD_ESQUEMA.MAESTRA M 
		WHERE M.Rendicion_Nro IS NOT NULL AND Nro_Factura IS NOT NULL;

END;
GO

EXEC SUBSELECT.SP_MIGRACION_REDENCION;
		
GO	


/***********/
/* TRIGGERS */
/***********/
GO 

CREATE TRIGGER  SUBSELECT.TG_ALTA_CLIENTE ON SUBSELECT.CLIENTE FOR INSERT
AS
BEGIN

	DECLARE @ID_USUARIO INT;
	DECLARE @ID_PERSONA INT;

	INSERT INTO SUBSELECT.USUARIO
	(ID_PERSONA,USERNAME,PASSWORD)
	SELECT ID_CLIENTE,'CLIENTE'+CONVERT(VARCHAR(10),ID_CLIENTE),SUBSELECT.PASSWORD_HASH('w23e') FROM INSERTED;

	SELECT @ID_PERSONA = ID_CLIENTE FROM INSERTED;

	SELECT @ID_USUARIO = ID_USUARIO 
	FROM SUBSELECT.USUARIO AS USU 
	WHERE ID_PERSONA = @ID_PERSONA;

	INSERT INTO SUBSELECT.USUARIO_ROL
	(ID_USUARIO,ID_ROL)
	VALUES (@ID_USUARIO,2);

END;

GO


GO

CREATE TRIGGER SUBSELECT.TG_QUITAR_ROL_INACTIVO_USUARIOS ON SUBSELECT.ROL
FOR UPDATE
AS
BEGIN
	IF UPDATE(ACTIVO)
	BEGIN
		BEGIN TRANSACTION
			DELETE USUARIO_ROL
				FROM SUBSELECT.USUARIO_ROL USUARIO_ROL
				INNER JOIN SUBSELECT.ROL ROL
					ON ROL.ID_ROL = USUARIO_ROL.ID_ROL
				AND ROL.ACTIVO = 0;	
		COMMIT;
	END
END

GO

/******************/
/* ABMS Y FILTROS */
/******************/


/*VALIDA EL USUARIO Y SU CONTRASEÑA VERIFICANDO QUE SE HAYAN CARGADO LOS DATOS E INHABILITANDO
 AL USUARIO SI SUPERA LOS TRES INTENTOS ERRONEOS DE CONTRASEÑA*/

GO

CREATE PROCEDURE SUBSELECT.LOGIN_USUARIO
@USERNAME VARCHAR(255),
@PASSWORD NVARCHAR(255),
@ID_USUARIO INT OUTPUT,
@ID_ERROR BIT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT

AS
BEGIN
	
	DECLARE @INTENTOS INT;
	DECLARE @HASH_PASS NVARCHAR(255);
	
	SET @ID_ERROR=0;
	SET @DESC_ERROR='';
	SET @ID_USUARIO=0;
	
	SET @USERNAME = SUBSELECT.TRIM(UPPER(@USERNAME));
	
	IF (@USERNAME IS NULL OR @USERNAME='')
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'Debe ingresar un usuario';
		RETURN;
	END
	
	IF ((SELECT ID_USUARIO FROM SUBSELECT.USUARIO AS USERTAB WHERE USERTAB.USERNAME = @USERNAME) IS NULL)
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'El usuario ingresado no existe';
		RETURN;
	END
	
	IF ((SELECT ACTIVO FROM SUBSELECT.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME) = 0)
	BEGIN
		SET @ID_ERROR = 1;
		SET @DESC_ERROR = 'Este usuario se encuentra bloqueado. contacte a un administrador';
		RETURN;
	END
	
	SET @HASH_PASS = SUBSELECT.PASSWORD_HASH(@PASSWORD);
	
	IF ((SELECT PASSWORD FROM SUBSELECT.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME)<>@HASH_PASS)
	  BEGIN
		  SET @ID_ERROR = 1;
		  SET @DESC_ERROR = 'La constraseña ingresada es incorrecta';
		
		  SELECT @INTENTOS = INTENTOS FROM SUBSELECT.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME;
		  SET @INTENTOS = @INTENTOS +1;
		  
		  UPDATE SUBSELECT.USUARIO
		  SET INTENTOS = @INTENTOS
		  WHERE USERNAME= @USERNAME;
	  END
	 ELSE
	  BEGIN
		    SELECT @ID_USUARIO = ID_USUARIO FROM SUBSELECT.USUARIO AS USERTAB WHERE USERTAB.USERNAME=@USERNAME;

			UPDATE SUBSELECT.USUARIO
			SET INTENTOS = 0
			WHERE USERNAME = @USERNAME;
			RETURN;
	  END
	
	IF (@INTENTOS = 3)
		BEGIN
			SET @DESC_ERROR = 'La contraseña ingresada es incorrecta. usuario bloqueado';
			
			UPDATE SUBSELECT.USUARIO
			SET ACTIVO = 0
			WHERE USERNAME=@USERNAME;
			RETURN;
		END
	
	RETURN;
END;

GO

/*GET ROLES POR USUARIO*/

CREATE PROCEDURE SUBSELECT.GET_ROLES_POR_USUARIO 
@ID_USUARIO VARCHAR(255),
@ID_ERROR INT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT
AS
BEGIN
	DECLARE @CANTIDAD INT;

	SELECT @ID_ERROR = 0;
	SELECT @DESC_ERROR = '';

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.USUARIO
	WHERE ID_USUARIO = @ID_USUARIO;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El usuario ingresado no existe.';
		RETURN;
	END	

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.USUARIO_ROL UR, SUBSELECT.USUARIO U
	WHERE U.ID_USUARIO = @ID_USUARIO;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El usuario ingresado no tiene roles asociados.';
		RETURN;
	END	

	SELECT R.ID_ROL, R.DESCRIPCION, R.ACTIVO 
	FROM SUBSELECT.USUARIO_ROL UR, SUBSELECT.ROL R
	WHERE UR.ID_USUARIO = @ID_USUARIO
	
	AND R.ID_ROL = UR.ID_ROL;

END;

GO


/*GET SUCURSALES POR USUARIO*/

CREATE PROCEDURE SUBSELECT.GET_SUCURSALES_POR_USUARIO 
@ID_USUARIO VARCHAR(255),
@ID_ERROR INT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT
AS
BEGIN
	DECLARE @CANTIDAD INT;

	SELECT @ID_ERROR = 0;
	SELECT @DESC_ERROR = '';

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.USUARIO
	WHERE ID_USUARIO = @ID_USUARIO;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El usuario ingresado no existe.';
		RETURN;
	END	

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.USUARIO_SUCURSAL US, SUBSELECT.USUARIO U
	WHERE U.ID_USUARIO = @ID_USUARIO;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El usuario ingresado no tiene sucursales asociadas.';
		RETURN;
	END	

	SELECT S.ID_SUCURSAL, S.NOMBRE, S.ACTIVO 
	FROM SUBSELECT.USUARIO_SUCURSAL US, SUBSELECT.SUCURSAL S
	WHERE US.ID_USUARIO = @ID_USUARIO
	AND S.ID_SUCURSAL = US.ID_SUCURSAL;

END;

GO


/*RECUPERAR FUNCIONALIDADES DE LOS ROLES*/

CREATE PROCEDURE SUBSELECT.GET_FUNCIONALIDADES_POR_ROL 
@DESCRIPCION VARCHAR(50),
@ID_ERROR INT OUTPUT,
@DESC_ERROR VARCHAR(255) OUTPUT
AS
BEGIN
	DECLARE @CANTIDAD INT;

	SELECT @ID_ERROR = 0;
	SELECT @DESC_ERROR = '';

	SELECT @DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESCRIPCION));

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.ROL
	WHERE DESCRIPCION = @DESCRIPCION;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El rol ingresado no existe.';
		RETURN;
	END	

	SELECT @CANTIDAD = COUNT(*) FROM SUBSELECT.ROL_FUNCIONALIDAD RF, SUBSELECT.ROL R
	WHERE R.ID_ROL = RF.ID_ROL
	AND R.DESCRIPCION = @DESCRIPCION;

	IF (@CANTIDAD IS NULL OR @CANTIDAD = 0)
	BEGIN
		SELECT @ID_ERROR = 1;
		SELECT @DESC_ERROR = 'El rol seleccionado no tiene funcionalidades asociadas.';
		RETURN;
	END	

	SELECT F.ID_FUNCIONALIDAD, F.DESCRIPCION 
	FROM SUBSELECT.FUNCIONALIDAD F, SUBSELECT.ROL_FUNCIONALIDAD RF, SUBSELECT.ROL R
	WHERE R.ID_ROL = RF.ID_ROL
	AND RF.ID_FUNCIONALIDAD = F.ID_FUNCIONALIDAD
	AND R.DESCRIPCION = @DESCRIPCION;
END;
GO


GO
/*ALTA DE  ROLES*/
CREATE PROCEDURE SUBSELECT.SP_ABM_ROL_ALTA
@DESC_ROL VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT,
@ID_ROL INT OUTPUT
AS
BEGIN
	--VALIDACIONES--
	IF(@DESC_ROL IS NULL) OR (@DESC_ROL = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para el rol a crear';
		RETURN
	END

	--PROCEDIMIENTO--
	IF((SELECT COUNT(1) FROM SUBSELECT.ROL AS ROL WHERE ROL.DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESC_ROL))) > 0) -- VALIDA QUE EL ROL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El rol ingresado ya existe';
		RETURN
	END
	ELSE
	BEGIN
		INSERT INTO SUBSELECT.ROL (DESCRIPCION, ACTIVO) VALUES (@DESC_ROL,1);
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'El rol "' + @DESC_ROL + '" se ha guardado correctamente';
		SELECT @ID_ROL = CONVERT(INT, IDENT_CURRENT('SUBSELECT.ROL'));
	END

END
GO

CREATE PROCEDURE SUBSELECT.GET_ROLES_POR_DESCRIPCION
@DESCRIPCION_ROL VARCHAR(255)
AS
BEGIN
	IF(@DESCRIPCION_ROL IS NULL)
	BEGIN
		SET @DESCRIPCION_ROL = '';
	END
	
	SET @DESCRIPCION_ROL = SUBSELECT.TRIM(UPPER(@DESCRIPCION_ROL));

	SELECT R.ID_ROL, R.DESCRIPCION, R.ACTIVO
	FROM SUBSELECT.ROL R
	WHERE R.DESCRIPCION LIKE '%'+@DESCRIPCION_ROL+'%';
END
GO

GO
/* GET_ALL_FUNCIONALIDADES */

CREATE PROCEDURE SUBSELECT.GET_ALL_FUNCIONALIDADES 
AS
BEGIN
	SELECT F.ID_FUNCIONALIDAD, F.DESCRIPCION 
	FROM SUBSELECT.FUNCIONALIDAD F;
END
GO

GO

/* PERMITE AGREGAR UNA FUNCIONALIDAD DEFINIDA A UN ROL EXISTENTE. 
  (LLAMAMOS A ESTE PROCEDIMIENTO DESDE LA SECCION DE "MODIFICACION" DE LA APLICACION.
   CREA UN NUEVO REGISTRO EN LA TABLA ASOCIATIVA FLOPANICMA.ROL_FUNCIONALIDAD) */

CREATE PROCEDURE SUBSELECT.SP_ABM_ROL_AGREGAR_FUNCIONALIDAD
@DESC_ROL VARCHAR(255),
@DESC_FUNCIONALIDAD VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @ID_ROL INT;
	DECLARE @ID_FUNCIONALIDAD INT;
	
	--VALIDACIONES--
	SELECT @ID_ROL = ROL.ID_ROL -- BUSCA EL ROL POR SU DESCRIPCION EN LA BASE
	FROM SUBSELECT.ROL AS ROL 
	WHERE ROL.DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESC_ROL));
	
	IF(@ID_ROL IS NULL) -- EN CASO DE QUE SE ESTE QUERIENDO AGREGAR UNA FUNCIONALIDAD A UN ROL INEXISTENTE CORTA LA EJECUCION Y DEVUELVE UN MENSAJE DE ERROR 
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El rol especificado no existe';
		RETURN
	END
	
	SELECT @ID_FUNCIONALIDAD = FUNCIONALIDAD.ID_FUNCIONALIDAD -- IDEM PARA FUNCIONALIDAD
	FROM SUBSELECT.FUNCIONALIDAD AS FUNCIONALIDAD
	WHERE FUNCIONALIDAD.DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESC_FUNCIONALIDAD));
	
	IF(@ID_FUNCIONALIDAD IS NULL) OR (@DESC_FUNCIONALIDAD = '')
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La funcionalidad especificada no existe';
		RETURN
	END

	--PROCEDIMIENTO--
	IF EXISTS(SELECT  1 
				  FROM SUBSELECT.ROL_FUNCIONALIDAD AS ROL_FUNCIONALIDAD 
				  WHERE (ROL_FUNCIONALIDAD.ID_ROL = @ID_ROL) AND (ROL_FUNCIONALIDAD.ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD)) -- VALIDA QUE LA NUEVA FUNCIONALIDAD NO HAYA SIDO ANTERIORMENTE ASIGNADA AL ROL
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La funcionalidad "' + @DESC_FUNCIONALIDAD + '" ya ha sido anteriormente asignada al rol "' + @DESC_ROL + '".';
		RETURN
	END
	ELSE
	BEGIN
		INSERT INTO SUBSELECT.ROL_FUNCIONALIDAD (ID_ROL,ID_FUNCIONALIDAD) VALUES (@ID_ROL,@ID_FUNCIONALIDAD);
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'La funcionalidad "' + @DESC_FUNCIONALIDAD + '" ha sido asignada correctamente al rol "' + @DESC_ROL + '".';
	END
END
GO



/* PERMITE QUITAR UNA FUNCIONALIDAD DEFINIDA A UN ROL EXISTENTE. 
  (LLAMAMOS A ESTE PROCEDIMIENTO DESDE LA SECCION DE "MODIFICACION" DE LA APLICACION.
   ELIMINA UN REGISTRO DE LA TABLA ASOCIATIVA FLOPANICMA.ROL_FUNCIONALIDAD) */
 
CREATE PROCEDURE SUBSELECT.SP_ABM_ROL_QUITAR_FUNCIONALIDAD
@DESC_ROL VARCHAR(255),
@DESC_FUNCIONALIDAD VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @ID_ROL INT;
	DECLARE @ID_FUNCIONALIDAD VARCHAR(255);
	
	--VALIDACIONES--
	SELECT @ID_ROL = ID_ROL
	FROM SUBSELECT.ROL AS ROL
	WHERE ROL.DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESC_ROL));
	
	IF(@ID_ROL IS NULL) -- VALIDA QUE EXISTA EL ROL AL QUE LE QUIERO QUITAR LA FUNCIONALIDAD
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El rol especificado no existe';
		RETURN
	END
	
	SELECT @ID_FUNCIONALIDAD = ID_FUNCIONALIDAD
	FROM SUBSELECT.FUNCIONALIDAD AS FUNCIONALIDAD
	WHERE FUNCIONALIDAD.DESCRIPCION = SUBSELECT.TRIM(UPPER(@DESC_FUNCIONALIDAD));
	
	IF(@ID_FUNCIONALIDAD IS NULL) -- IDEM PARA FUNCIONALIDAD
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La funcionalidad especificada no existe';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF EXISTS(SELECT 1 
			  FROM SUBSELECT.ROL_FUNCIONALIDAD AS ROL_FUNCIONALIDAD 
			  WHERE (ROL_FUNCIONALIDAD.ID_ROL = @ID_ROL) AND (ROL_FUNCIONALIDAD.ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD))
	BEGIN		  
		DELETE FROM SUBSELECT.ROL_FUNCIONALIDAD WHERE (ID_ROL = @ID_ROL) AND (ID_FUNCIONALIDAD = @ID_FUNCIONALIDAD);
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'La funcionalidad se ha quitado exitosamente.';
	END
	ELSE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La funcionalidad que desea quitar no se encuentra asignada al rol especificado.'
	END	
END
GO


/* PERMITE MODIFICAR EL NOMBRE O EL ESTADO DE UN ROL EXISTENTE
   (PUEDO CAMBIAR EL NOMBRE Y VOLVER A HABILITAR EL ESTADO DE ROL) */

GO

CREATE PROCEDURE SUBSELECT.SP_ABM_ROL_MODIFICAR_NOMBRE
@ID_ROL INT,
@DESC_ROL VARCHAR(255),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(1) FROM
	SUBSELECT.ROL AS ROL 
	WHERE ROL.ID_ROL = @ID_ROL;

	IF(@ID_ROL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El rol que desea modificar no existe.';
		RETURN
	END
	
	IF (@DESC_ROL IS NULL) OR (@DESC_ROL = '') -- EVITO QUE GUARDE EN LA BASE UNA DESCRIPCION "NULL" O UNA PALABRA VACIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para modificar.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	UPDATE SUBSELECT.ROL -- MODIFICO EL NOMBRE DEL ROL
	SET DESCRIPCION = SUBSELECT.TRIM(@DESC_ROL)
	WHERE ID_ROL = @ID_ROL;
	
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = ('El rol "' + @DESC_ROL + '" se ha guardado correctamente.');
END
GO

GO

CREATE PROCEDURE SUBSELECT.SP_ABM_ROL_ACTIVAR_DESACTIVAR
@ID_ROL INT,
@ACTIVO BIT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(1) FROM
	SUBSELECT.ROL AS ROL 
	WHERE ROL.ID_ROL = @ID_ROL;
	
	IF(@ID_ROL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El rol que desea eliminar no existe.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF(@ACTIVO = 1)
		UPDATE SUBSELECT.ROL 
		SET ACTIVO = 0 
		WHERE ID_ROL = @ID_ROL;
	ELSE
		UPDATE SUBSELECT.ROL
		SET ACTIVO = 1
		WHERE ID_ROL = @ID_ROL;
		
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = ' ';
END
GO


/*ABM CLIENTE*/

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_CLIENTE_ALTA
@NOMBRE VARCHAR(255),
@APELLIDO VARCHAR(255),
@DNI NUMERIC(18,0),
@DIRECCION VARCHAR(255),
@TELEFONO NUMERIC(18,0),
@MAIL VARCHAR(50),
@FEC_NAC DATETIME,
@CODIGO_POSTAL INT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT,
@ID_CLIENTE INT OUTPUT
AS
BEGIN
	
	--VALIDACIONES--
	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para el cliente a crear';
		RETURN
	END

	IF(@APELLIDO IS NULL) OR (@APELLIDO = '') -- VALIDA EL INGRESO DE UN APELLIDO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un apellido para el cliente a crear';
		RETURN
	END

		IF(@DNI IS NULL) OR (@DNI = 0) -- VALIDA EL INGRESO DE UN DNI OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un dni para el cliente a crear';
		RETURN
	END

		IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el cliente a crear';
		RETURN
	END

	IF(@TELEFONO IS NULL) OR (@TELEFONO = 0)-- VALIDA EL INGRESO DE UN TELEFONO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un telefono para el cliente a crear';
		RETURN
	END

	IF(@FEC_NAC IS NULL)-- VALIDA EL INGRESO DE UNA FECHA DE NACIMIENTO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha de nacimiento para el cliente a crear';
		RETURN
	END

	IF(@CODIGO_POSTAL IS NULL)OR (@CODIGO_POSTAL = 0)-- VALIDA EL INGRESO DE UN CODIGO POSTAL OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una codigo postal para el cliente a crear';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF((SELECT COUNT(1) FROM SUBSELECT.CLIENTE AS C WHERE C.MAIL = @MAIL) > 0) -- VALIDA QUE EL MAIL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El mail ingresado ya existe';
		RETURN
	END 
	ELSE
	BEGIN
		
		INSERT INTO SUBSELECT.CLIENTE
		(ID_CLIENTE,NOMBRE,APELLIDO,DNI,DIRECCION,TELEFONO,MAIL,F_NACIMIENTO,CODIGO_POSTAL)
		VALUES
			(NEXT VALUE FOR SUBSELECT.PERSONA_SEQ ,@NOMBRE,@APELLIDO,@DNI,@DIRECCION,@TELEFONO,@MAIL,@FEC_NAC,@CODIGO_POSTAL);

		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'El cliente ' + @NOMBRE + '  '+ @APELLIDO + ' se ha guardado correctamente';
		SET @ID_CLIENTE = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='PERSONA_SEQ'));
	END
END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_CLIENTE_MODIFICAR
@ID_CLIENTE INT,
@NOMBRE VARCHAR(255),
@APELLIDO VARCHAR(255),
@DNI NUMERIC(18,0),
@DIRECCION VARCHAR(255),
@TELEFONO NUMERIC(18,0),
@MAIL VARCHAR(50),
@FEC_NAC DATETIME,
@CODIGO_POSTAL INT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN 
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.CLIENTE AS C 
	WHERE C.ID_CLIENTE = @ID_CLIENTE;
	SET @FLAG_ERROR = 0;
	IF(@ID_CLIENTE IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El cliente que desea modificar no existe.';
		RETURN
	END

	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para el cliente a modificar';
		RETURN
	END

	IF(@APELLIDO IS NULL) OR (@APELLIDO = '') -- VALIDA EL INGRESO DE UN APELLIDO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un apellido para el cliente a modificar';
		RETURN
	END

		IF(@DNI IS NULL)OR (@DNI = 0) -- VALIDA EL INGRESO DE UN DNI OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un dni para el cliente a modificar';
		RETURN
	END

		IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el cliente a modificar';
		RETURN
	END

	IF(@TELEFONO IS NULL)OR (@TELEFONO = 0)-- VALIDA EL INGRESO DE UN TELEFONO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un telefono para el cliente a modificar';
		RETURN
	END

	IF(@FEC_NAC IS NULL)-- VALIDA EL INGRESO DE UNA FECHA DE NACIMIENTO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha de nacimiento para el cliente a modificar';
		RETURN
	END

	IF(@CODIGO_POSTAL IS NULL)OR (@CODIGO_POSTAL = 0)-- VALIDA EL INGRESO DE UN CODIGO POSTAL OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una codigo postal para el cliente a modificar';
		RETURN
	END

	IF((SELECT COUNT(1) FROM SUBSELECT.CLIENTE AS C WHERE C.ID_CLIENTE <> @ID_CLIENTE AND  C.MAIL = @MAIL) > 0) -- VALIDA QUE EL MAIL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El mail ingresado ya existe';
		RETURN
	END 

	UPDATE SUBSELECT.CLIENTE
	SET  NOMBRE = @NOMBRE, APELLIDO = @APELLIDO, DNI = @DNI,   
			DIRECCION=@DIRECCION,TELEFONO=@TELEFONO,MAIL=@MAIL, F_NACIMIENTO = @FEC_NAC, CODIGO_POSTAL = @CODIGO_POSTAL
	WHERE ID_CLIENTE = @ID_CLIENTE;


	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'El cliente se modifico correctamente.';
	
END
GO

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_CLIENTE_ACTIVAR_DESACTIVAR
@ID_CLIENTE INT,
@ACTIVO BIT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.CLIENTE AS C
	WHERE C.ID_CLIENTE = @ID_CLIENTE;
	SET @FLAG_ERROR = 0;
	IF(@ID_CLIENTE IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El cliente que desea eliminar no existe.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF(@ACTIVO = 1)
		UPDATE SUBSELECT.CLIENTE 
		SET ACTIVO = 0 
		WHERE ID_CLIENTE = @ID_CLIENTE;
	ELSE
		UPDATE SUBSELECT.CLIENTE
		SET ACTIVO = 1
		WHERE ID_CLIENTE = @ID_CLIENTE;
		
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = ' ';
END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_CLIENTES
@NOMBRE VARCHAR(255),
@APELLIDO VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

		IF(@APELLIDO IS NULL)
	BEGIN
		SET @APELLIDO = '';
	END

	IF(@DNI IS NULL)
	BEGIN
		SET @DNI = 0;
	END
	

	IF(@DNI IS NULL OR @DNI =0)
	BEGIN
	 SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, C.DNI, 
			C.DIRECCION, C.TELEFONO, C.MAIL, C.F_NACIMIENTO, C.CODIGO_POSTAL, C.ACTIVO 
	 FROM SUBSELECT.CLIENTE C
	 WHERE C.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND C.APELLIDO LIKE '%'+@APELLIDO+'%'
	END
	ELSE
	BEGIN
		 SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, C.DNI, 
			C.DIRECCION, C.TELEFONO, C.MAIL, C.F_NACIMIENTO, C.CODIGO_POSTAL, C.ACTIVO 
	 FROM SUBSELECT.CLIENTE C
	 WHERE C.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND C.APELLIDO LIKE '%'+@APELLIDO+'%'
		AND C.DNI = @DNI
	END

END
GO


GO

CREATE PROCEDURE SUBSELECT.GET_CLIENTES_ACTIVOS
@NOMBRE VARCHAR(255),
@APELLIDO VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

		IF(@APELLIDO IS NULL)
	BEGIN
		SET @APELLIDO = '';
	END

	IF(@DNI IS NULL)
	BEGIN
		SET @DNI = 0;
	END
	

	IF(@DNI IS NULL OR @DNI =0)
	BEGIN
	 SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, C.DNI, 
			C.DIRECCION, C.TELEFONO, C.MAIL, C.F_NACIMIENTO, C.CODIGO_POSTAL, C.ACTIVO 
	 FROM SUBSELECT.CLIENTE C
	 WHERE  C.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND C.APELLIDO LIKE '%'+@APELLIDO+'%'
		AND C.ACTIVO = 1
	END
	ELSE
	BEGIN
		 SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, C.DNI, 
			C.DIRECCION, C.TELEFONO, C.MAIL, C.F_NACIMIENTO, C.CODIGO_POSTAL, C.ACTIVO 
	 FROM SUBSELECT.CLIENTE C
	 WHERE  C.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND C.APELLIDO LIKE '%'+@APELLIDO+'%'
		AND C.DNI = @DNI
		AND C.ACTIVO = 1
	END

END
GO



GO
CREATE PROCEDURE SUBSELECT.SP_ABM_EMPRESA_ALTA
@NOMBRE VARCHAR(255),
@CUIT VARCHAR(50),
@DIRECCION VARCHAR(255),
@ID_RUBRO NUMERIC(18,0),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT,
@ID_EMPRESA INT OUTPUT
AS
BEGIN
	
	--VALIDACIONES--
	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para la empresa a crear';
		RETURN
	END

	IF(@CUIT IS NULL) OR (@CUIT = '') -- VALIDA EL INGRESO DE UN APELLIDO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un cuit para la empresa a crear';
		RETURN
	END

	IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el empresa a crear';
		RETURN
	END

	IF(@ID_RUBRO IS NULL) OR (@ID_RUBRO = 0)-- VALIDA EL INGRESO DE UN TELEFONO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un rubro para el empresa a crear';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF((SELECT COUNT(1) FROM SUBSELECT.EMPRESA AS E WHERE E.CUIT = @CUIT) > 0) -- VALIDA QUE EL TELEFONO NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El cuit ingresado ya existe';
		RETURN
	END 
	ELSE
	BEGIN
		
		INSERT INTO SUBSELECT.EMPRESA
		(ID_EMPRESA,NOMBRE,CUIT,DIRECCION,ID_RUBRO)
		VALUES
			(NEXT VALUE FOR SUBSELECT.EMPRESA_SEQ ,@NOMBRE,@CUIT,@DIRECCION,@ID_RUBRO);
		
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'La empresa ' + @NOMBRE + '  '+  ' se ha guardado correctamente';
		SET @ID_EMPRESA = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='EMPRESA_SEQ'));
	END
END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_EMPRESA_MODIFICAR
@ID_EMPRESA INT,
@NOMBRE VARCHAR(255),
@CUIT VARCHAR(50),
@DIRECCION VARCHAR(255),
@ID_RUBRO NUMERIC(18,0),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN 

	
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.EMPRESA AS E 
	WHERE E.ID_EMPRESA = @ID_EMPRESA;
	SET @FLAG_ERROR = 0;
	IF(@ID_EMPRESA IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La empresa que desea modificar no existe.';
		RETURN
	END

	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para la empresa a crear';
		RETURN
	END

	IF(@CUIT IS NULL) OR (@CUIT = '') -- VALIDA EL INGRESO DE UN APELLIDO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un cuit para la empresa a crear';
		RETURN
	END

	IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el empresa a crear';
		RETURN
	END

	IF(@ID_RUBRO IS NULL) OR (@ID_RUBRO = 0)-- VALIDA EL INGRESO DE UN TELEFONO OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un rubro para el empresa a crear';
		RETURN
	END

	IF((SELECT COUNT(1) FROM SUBSELECT.EMPRESA AS E WHERE E.ID_EMPRESA <> @ID_EMPRESA AND  E.CUIT = @CUIT) > 0) -- VALIDA QUE EL CUIT NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El cuit ingresado ya existe';
		RETURN
	END 

	UPDATE SUBSELECT.EMPRESA
	SET  NOMBRE = @NOMBRE, CUIT = @CUIT,   
			DIRECCION=@DIRECCION,ID_RUBRO=@ID_RUBRO
	WHERE ID_EMPRESA = @ID_EMPRESA;


	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'La empresa se modifico correctamente.';
	
END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_EMPRESA_ACTIVAR_DESACTIVAR
@ID_EMPRESA INT,
@ACTIVO BIT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.EMPRESA AS E 
	WHERE E.ID_EMPRESA = @ID_EMPRESA;
	SET @FLAG_ERROR = 0;
	IF(@ID_EMPRESA IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La empresa que desea eliminar no existe.';
		RETURN
	END

	SELECT @CANT_REGISTROS = COUNT(*) FROM SUBSELECT.FACTURA F 
		WHERE F.ID_EMPRESA = @ID_EMPRESA AND
		 (NOT EXISTS( SELECT * FROM SUBSELECT.REDENCION_FACTURA RF WHERE F.NRO_FACTURA = RF.NRO_FACTURA)
		  OR NOT EXISTS( SELECT * FROM SUBSELECT.PAGO_FACTURAS PF WHERE F.NRO_FACTURA = PF.NRO_FACTURA));
	
		IF(@CANT_REGISTROS > 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La empresa que desea eliminar tiene facturas no rendidas.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF(@ACTIVO = 1)
		UPDATE SUBSELECT.EMPRESA
		SET ACTIVO = 0 
		WHERE ID_EMPRESA = @ID_EMPRESA;
	ELSE
		UPDATE SUBSELECT.EMPRESA
		SET ACTIVO = 1
		WHERE ID_EMPRESA = @ID_EMPRESA;
		
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = ' ';
END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_EMPRESAS
@NOMBRE VARCHAR(255),
@CUIT VARCHAR(50),
@ID_RUBRO NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

		IF(@CUIT IS NULL)
	BEGIN
		SET @CUIT = '';
	END

	IF(@ID_RUBRO IS NULL)
	BEGIN
		SET @ID_RUBRO = 0;
	END
	

	IF(@ID_RUBRO IS NULL OR @ID_RUBRO =0)
	BEGIN
	 SELECT E.ID_EMPRESA, E.NOMBRE, E.CUIT, 
			E.DIRECCION, E.ID_RUBRO, R.DESCRIPCION, E.ACTIVO 
	 FROM SUBSELECT.EMPRESA E , SUBSELECT.RUBRO R
	 WHERE E.ID_RUBRO = R.ID_RUBRO 
		AND E.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND E.CUIT LIKE '%'+@CUIT+'%'
	END
	ELSE
	BEGIN
	 SELECT E.ID_EMPRESA, E.NOMBRE, E.CUIT, 
			E.DIRECCION, E.ID_RUBRO, R.DESCRIPCION, E.ACTIVO 
	 FROM SUBSELECT.EMPRESA E , SUBSELECT.RUBRO R
	 WHERE E.ID_RUBRO = R.ID_RUBRO 
		AND E.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND E.CUIT LIKE '%'+@CUIT+'%'
		AND E.ID_RUBRO = @ID_RUBRO
	END

END
GO


GO

CREATE PROCEDURE SUBSELECT.GET_EMPRESAS_ACTIVAS
@NOMBRE VARCHAR(255),
@CUIT VARCHAR(50),
@ID_RUBRO NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

		IF(@CUIT IS NULL)
	BEGIN
		SET @CUIT = '';
	END

	IF(@ID_RUBRO IS NULL)
	BEGIN
		SET @ID_RUBRO = 0;
	END
	

	IF(@ID_RUBRO IS NULL OR @ID_RUBRO =0)
	BEGIN
	 SELECT E.ID_EMPRESA, E.NOMBRE, E.CUIT, 
			E.DIRECCION, E.ID_RUBRO, R.DESCRIPCION, E.ACTIVO 
	 FROM SUBSELECT.EMPRESA E , SUBSELECT.RUBRO R
	 WHERE E.ID_RUBRO = R.ID_RUBRO 
		AND E.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND E.CUIT LIKE '%'+@CUIT+'%'
		AND E.ACTIVO = 1
	END
	ELSE
	BEGIN
	 SELECT E.ID_EMPRESA, E.NOMBRE, E.CUIT, 
			E.DIRECCION, E.ID_RUBRO, R.DESCRIPCION, E.ACTIVO 
	 FROM SUBSELECT.EMPRESA E , SUBSELECT.RUBRO R
	 WHERE E.ID_RUBRO = R.ID_RUBRO 
		AND E.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND E.CUIT LIKE '%'+@CUIT+'%'
		AND E.ID_RUBRO = @ID_RUBRO
		AND E.ACTIVO = 1
	END

END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_SUCURSAL_ALTA
@NOMBRE VARCHAR(255),
@DIRECCION VARCHAR(255),
@CODIGO_POSTAL NUMERIC(18,0),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT,
@ID_SUCURSAL INT OUTPUT
AS
BEGIN
	
	--VALIDACIONES--
	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para la sucursal a crear';
		RETURN
	END


	IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el sucursal a crear';
		RETURN
	END

	IF(@CODIGO_POSTAL IS NULL) OR (@CODIGO_POSTAL = 0)-- VALIDA EL INGRESO DE UN CODIGO POSTAL OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un codigo postal para el sucursal a crear';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF((SELECT COUNT(1) FROM SUBSELECT.SUCURSAL AS S WHERE S.CODIGO_POSTAL = @CODIGO_POSTAL) > 0) -- VALIDA QUE EL CODIGO POSTAL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El codigo postal ingresado ya existe';
		RETURN
	END 
	ELSE
	BEGIN
		
		INSERT INTO SUBSELECT.SUCURSAL
		(ID_SUCURSAL,NOMBRE,DIRECCION,CODIGO_POSTAL)
		VALUES
			(NEXT VALUE FOR SUBSELECT.SUCURSAL_SEQ ,@NOMBRE,@DIRECCION,@CODIGO_POSTAL);
		
		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'La sucursal ' + @NOMBRE + '  '+  ' se ha guardado correctamente';
		SET @ID_SUCURSAL = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='SUCURSAL_SEQ'));
	END
END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_SUCURSAL_MODIFICAR
@ID_SUCURSAL INT,
@NOMBRE VARCHAR(255),
@DIRECCION VARCHAR(255),
@CODIGO_POSTAL NUMERIC(18,0),
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN 

	
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.SUCURSAL AS S 
	WHERE S.ID_SUCURSAL = @ID_SUCURSAL;
	SET @FLAG_ERROR = 0;
	IF(@ID_SUCURSAL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La scursal que desea modificar no existe.';
		RETURN
	END

	IF(@NOMBRE IS NULL) OR (@NOMBRE = '') -- VALIDA EL INGRESO DE UN NOMBRE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nombre para la sucursal a modificar';
		RETURN
	END


	IF(@DIRECCION IS NULL) OR (@DIRECCION = '') -- VALIDA EL INGRESO DE UNA DIRECCION OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una direccion para el sucursal a modificar';
		RETURN
	END

	IF(@CODIGO_POSTAL IS NULL) OR (@CODIGO_POSTAL = 0)-- VALIDA EL INGRESO DE UN CODIGO POSTAL OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un codigo postal para el sucursal a modificar';
		RETURN
	END

	IF((SELECT COUNT(1) FROM SUBSELECT.SUCURSAL AS S WHERE S.ID_SUCURSAL <> @ID_SUCURSAL AND  S.CODIGO_POSTAL = @CODIGO_POSTAL) > 0) -- VALIDA QUE EL CODIGO POSTAL NO SE ENCUENTRE CARGADO EN LA BASE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'El codigo postal ingresado ya existe';
		RETURN
	END 

	UPDATE SUBSELECT.SUCURSAL
	SET  NOMBRE = @NOMBRE,   
			DIRECCION=@DIRECCION,CODIGO_POSTAL=@CODIGO_POSTAL
	WHERE ID_SUCURSAL = @ID_SUCURSAL;


	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'La sucursal se modifico correctamente.';
	
END
GO


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_SUCURSAL_ACTIVAR_DESACTIVAR
@ID_SUCURSAL INT,
@ACTIVO BIT,
@FLAG_ERROR BIT OUTPUT,
@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.SUCURSAL AS S 
	WHERE S.ID_SUCURSAL = @ID_SUCURSAL;
	SET @FLAG_ERROR = 0;
	IF(@ID_SUCURSAL IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La sucursal que desea eliminar no existe.';
		RETURN
	END
	
	--PROCEDIMIENTO--
	IF(@ACTIVO = 1)
		UPDATE SUBSELECT.SUCURSAL
		SET ACTIVO = 0 
		WHERE ID_SUCURSAL = @ID_SUCURSAL;
	ELSE
		UPDATE SUBSELECT.SUCURSAL
		SET ACTIVO = 1
		WHERE ID_SUCURSAL = @ID_SUCURSAL;
		
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = ' ';
END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_SUCURSALES
@NOMBRE VARCHAR(255),
@DIRECCION VARCHAR(255),
@CODIGO_POSTAL NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

	IF(@DIRECCION IS NULL)
	BEGIN
		SET @DIRECCION = '';
	END

	IF(@CODIGO_POSTAL IS NULL)
	BEGIN
		SET @CODIGO_POSTAL = 0;
	END
	

	IF(@CODIGO_POSTAL IS NULL OR @CODIGO_POSTAL =0)
	BEGIN
	 SELECT S.ID_SUCURSAL, S.NOMBRE, S.DIRECCION, 
			S.CODIGO_POSTAL, S.ACTIVO 
	 FROM SUBSELECT.SUCURSAL S
	 WHERE  S.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND S.DIRECCION LIKE '%'+@DIRECCION+'%'
	END
	ELSE
	BEGIN
	  SELECT S.ID_SUCURSAL, S.NOMBRE, S.DIRECCION, 
			S.CODIGO_POSTAL, S.ACTIVO 
	 FROM SUBSELECT.SUCURSAL S
	 WHERE  S.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND S.DIRECCION LIKE '%'+@DIRECCION+'%'
		AND S.CODIGO_POSTAL = @CODIGO_POSTAL
	END

END
GO


GO

CREATE PROCEDURE SUBSELECT.GET_SUCURSALES_ACTIVAS
@NOMBRE VARCHAR(255),
@DIRECCION VARCHAR(255),
@CODIGO_POSTAL NUMERIC(18,0)
AS
BEGIN
	IF(@NOMBRE IS NULL)
	BEGIN
		SET @NOMBRE = '';
	END

	IF(@DIRECCION IS NULL)
	BEGIN
		SET @DIRECCION = '';
	END

	IF(@CODIGO_POSTAL IS NULL)
	BEGIN
		SET @CODIGO_POSTAL = 0;
	END
	

		IF(@CODIGO_POSTAL IS NULL OR @CODIGO_POSTAL =0)
	BEGIN
	 SELECT S.ID_SUCURSAL, S.NOMBRE, S.DIRECCION, 
			S.CODIGO_POSTAL, S.ACTIVO 
	 FROM SUBSELECT.SUCURSAL S
	 WHERE  S.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND S.DIRECCION LIKE '%'+@DIRECCION+'%'
		AND S.ACTIVO = 1
	END
	ELSE
	BEGIN
	 SELECT S.ID_SUCURSAL, S.NOMBRE, S.DIRECCION, 
			S.CODIGO_POSTAL, S.ACTIVO 
	 FROM SUBSELECT.SUCURSAL S
	 WHERE  S.NOMBRE LIKE '%' + @NOMBRE + '%' 
		AND S.DIRECCION LIKE '%'+@DIRECCION+'%'
		AND S.CODIGO_POSTAL = @CODIGO_POSTAL
		AND S.ACTIVO = 1
	END

END
GO

/*ABM FACTURACION*/ 

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_FACTURACION_ALTA
	@ID_CLIENTE INT,
	@ID_EMPRESA INT,
	@FECHA DATETIME,
	@FECHA_VENCIMIENTO DATETIME,
	@FLAG_ERROR BIT OUTPUT,
	@NRO_FACTURA NUMERIC(18,0) OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN

	--VALIDACIONES--
	IF(@ID_CLIENTE IS NULL) -- VALIDA EL INGRESO DE UN CLIENTE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un cliente para la factura a crear';
		RETURN
	END

	IF(@ID_EMPRESA IS NULL)-- VALIDA EL INGRESO DE UNA EMPRESA OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una empresa para la factura a crear';
		RETURN
	END


	IF(@FECHA IS NULL)-- VALIDA EL INGRESO DE UNA FECHA  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha  para la facturacion a crear';
		RETURN
	END

	IF(@FECHA_VENCIMIENTO IS NULL)-- VALIDA EL INGRESO DE UNA FECHA DE VENCIMIENTO  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha de vencimiento  para la facturacion a crear';
		RETURN
	END


	--PROCEDIMIENTO--

	INSERT INTO SUBSELECT.FACTURA
	(NRO_FACTURA,ID_CLIENTE,ID_EMPRESA,FECHA,FECHA_VENCIMIENTO,TOTAL)
	VALUES
		(NEXT VALUE FOR SUBSELECT.FACTURA_SEQ ,@ID_CLIENTE ,@ID_EMPRESA,@FECHA,@FECHA_VENCIMIENTO,0);

	SET @FLAG_ERROR = 0;
	SET @NRO_FACTURA = CONVERT (NUMERIC(18,0),(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='FACTURA_SEQ'));
	SET @MENSAJE = 'Se creo la factura correctamente';
END


GO
CREATE PROCEDURE SUBSELECT.SP_ABM_ITEM_FACTURA_ALTA
	@NRO_FACTURA NUMERIC(18,0),
	@CANTIDAD NUMERIC(18,0),
	@MONTO NUMERIC(18,2),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT,
	@ID_ITEM INT OUTPUT
AS
BEGIN


	--VALIDACIONES--
	IF(@NRO_FACTURA IS NULL) -- VALIDA EL INGRESO DE UNA FACTURA OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una factura para el item a crear';
		RETURN
	END

	IF(@CANTIDAD IS NULL)-- VALIDA EL INGRESO DE LA CANTIDAD OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar la cantidad para el item a crear';
		RETURN
	END


	IF(@MONTO IS NULL)-- VALIDA EL INGRESO DEL MONTO  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto  para el item a crear';
		RETURN
	END

	IF(@MONTO <= 0)-- VALIDA EL INGRESO DE UNA TOTAL  POSITIVO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto  superior a 0 para el item a crear';
		RETURN
	END


	--PROCEDIMIENTO--

	INSERT INTO SUBSELECT.ITEM
	(ID_ITEM,NRO_FACTURA,CANTIDAD,MONTO)
	VALUES
		(NEXT VALUE FOR SUBSELECT.ITEM_FACTURA_SEQ ,@NRO_FACTURA ,@CANTIDAD,@MONTO);

	SET @ID_ITEM = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='ITEM_FACTURA_SEQ '));
	
	
	UPDATE SUBSELECT.FACTURA
		SET TOTAL = TOTAL + @MONTO * @CANTIDAD
		WHERE NRO_FACTURA = @NRO_FACTURA
    SET @FLAG_ERROR = 0;
    SET @MENSAJE = 'Se creo el item correctamente';
END



GO
CREATE PROCEDURE SUBSELECT.SP_ABM_FACTURACION_MODIFICACION
	@NRO_FACTURA NUMERIC(18,0),
	@ID_CLIENTE INT,
	@ID_EMPRESA INT,
	@FECHA DATETIME,
	@FECHA_VENCIMIENTO DATETIME,
	@TOTAL NUMERIC(18,2),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT  @CANT_REGISTROS= COUNT(1) FROM SUBSELECT.FACTURA F WHERE @NRO_FACTURA = F.NRO_FACTURA;
	IF(@CANT_REGISTROS <> 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La factura no existe.';
		RETURN
	END
	
	IF(@NRO_FACTURA IS NULL) -- VALIDA EL INGRESO DE UN NRO DE FACTURA OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el numero de la factura  a modificar';
		RETURN
	END


	IF(@ID_CLIENTE IS NULL) -- VALIDA EL INGRESO DE UN CLIENTE OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un cliente para la factura a modificar';
		RETURN
	END

	IF(@ID_EMPRESA IS NULL)-- VALIDA EL INGRESO DE UNA EMPRESA OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una empresa para la factura a modificar';
		RETURN
	END


	IF(@FECHA IS NULL)-- VALIDA EL INGRESO DE UNA FECHA  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha  para la facturacion a modificar';
		RETURN
	END

	IF(@FECHA_VENCIMIENTO IS NULL)-- VALIDA EL INGRESO DE UNA FECHA DE VENCIMIENTO  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha de vencimiento  para la facturacion a modificar';
		RETURN
	END


	IF(@TOTAL IS NULL)-- VALIDA EL INGRESO DE UNA TOTAL  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto total  para la facturacion a modificar';
		RETURN
	END

	IF(@TOTAL <= 0)-- VALIDA EL INGRESO DE UNA TOTAL  POSITIVO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto total superior a 0  para la facturacion a modificar';
		RETURN
	END

	
	

	SELECT  @CANT_REGISTROS= COUNT(1) FROM SUBSELECT.REDENCION_FACTURA RF WHERE @NRO_FACTURA = RF.NRO_FACTURA;
	IF(@CANT_REGISTROS <> 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No se puede modificar una factura rendida.';
		RETURN
	END

	
	SELECT @CANT_REGISTROS= COUNT(1) FROM SUBSELECT.PAGO_FACTURAS PF WHERE @NRO_FACTURA = PF.NRO_FACTURA;
	IF(@CANT_REGISTROS <> 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No se puede modificar una factura pagada.';
		RETURN
	END

	--PROCEDIMIENTO--
			
	UPDATE SUBSELECT.FACTURA
	SET
		ID_CLIENTE=@ID_CLIENTE , ID_EMPRESA=@ID_EMPRESA, FECHA =@FECHA,
		FECHA_VENCIMIENTO =	@FECHA_VENCIMIENTO,TOTAL = @TOTAL
	WHERE NRO_FACTURA = @NRO_FACTURA;


		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'La factura se modifico correctamente';
END


GO
GO
CREATE PROCEDURE SUBSELECT.SP_ABM_ITEM_FACTURACION_MODIFICACION
	@ID_ITEM INT,
	@NRO_FACTURA NUMERIC(18,0),
	@CANTIDAD NUMERIC(18,0),
	@MONTO NUMERIC(18,2),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	
	DECLARE @CANT_REGISTROS INT;
	
	--VALIDACIONES--
	SELECT  @CANT_REGISTROS= COUNT(1) FROM SUBSELECT.ITEM I WHERE @NRO_FACTURA = I.NRO_FACTURA AND I.ID_ITEM = @ID_ITEM;
	IF(@CANT_REGISTROS <> 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'EL item no existe.';
		RETURN
	END

	--VALIDACIONES--
	IF(@NRO_FACTURA IS NULL) -- VALIDA EL INGRESO DE UNA FACTURA OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una factura para el item a modificar';
		RETURN
	END

	IF(@CANTIDAD IS NULL)-- VALIDA EL INGRESO DE LA CANTIDAD OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar la cantidad para el item a modificar';
		RETURN
	END


	IF(@MONTO IS NULL)-- VALIDA EL INGRESO DEL MONTO  OBLIGATORIA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto  para el item a modificar';
		RETURN
	END

	IF(@MONTO <= 0)-- VALIDA EL INGRESO DE UNA TOTAL  POSITIVO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un monto total superior a 0  para la item a modificar';
		RETURN
	END
	

	--PROCEDIMIENTO--
			
	UPDATE SUBSELECT.ITEM
	SET
		MONTO=@MONTO ,CANTIDAD = @CANTIDAD
	WHERE NRO_FACTURA = @NRO_FACTURA AND ID_ITEM = @ID_ITEM;


		SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'EL item se modifico correctamente';
END

GO 

CREATE PROCEDURE SUBSELECT.GET_FACTURA
@NRO_FACTURA NUMERIC(18,0)
AS
BEGIN
	IF(@NRO_FACTURA  IS NULL)
	BEGIN
		RETURN
	END

	 SELECT *
		FROM SUBSELECT.FACTURA F
		WHERE F.NRO_FACTURA = @NRO_FACTURA
END
GO

GO 

CREATE PROCEDURE SUBSELECT.GET_FACTURA_POR_EMPRESA
@ID_EMPRESA INT
AS
BEGIN
	IF(@ID_EMPRESA  IS NULL)
	BEGIN
		RETURN
	END

	 SELECT *
		FROM SUBSELECT.FACTURA F
		WHERE F.ID_EMPRESA = @ID_EMPRESA
END
GO

CREATE PROCEDURE SUBSELECT.GET_FACTURA_NO_VENCIDAS
@NRO_FACTURA NUMERIC(18,0),
@FECHA DATETIME
AS
BEGIN
	IF(@NRO_FACTURA  IS NULL)
	BEGIN
		RETURN
	END

	IF(@FECHA  IS NULL)
	BEGIN
		RETURN
	END

	SELECT * FROM SUBSELECT.FACTURA F
		WHERE F.NRO_FACTURA = @NRO_FACTURA AND @FECHA < F.FECHA_VENCIMIENTO;
	
END
GO


CREATE PROCEDURE SUBSELECT.GET_FACTURAS_PAGAS_NO_RENDIDAS
AS
BEGIN
	SELECT 
		F.*
	FROM SUBSELECT.FACTURA F, SUBSELECT.PAGO_FACTURAS P
	WHERE 
		P.NRO_FACTURA = F.NRO_FACTURA
		AND
		NOT EXISTS (SELECT 
						1
					FROM
						SUBSELECT.REDENCION_FACTURA
					WHERE 
						SUBSELECT.REDENCION_FACTURA.NRO_FACTURA = F.NRO_FACTURA)

END


GO

CREATE PROCEDURE SUBSELECT.GET_ITEMS
@NRO_FACTURA NUMERIC(18,0)
AS
BEGIN
	IF(@NRO_FACTURA  IS NULL)
	BEGIN
		RETURN
	END


	SELECT * FROM SUBSELECT.ITEM I
		WHERE I.NRO_FACTURA = @NRO_FACTURA; 
	
END
GO

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_PAGO_ALTA
	@FECHA DATETIME,
	@TOTAL NUMERIC(18,2),
	@ID_FORMA_PAGO INT,
	@ID_SUCURSAL INT,
	@ID_CLIENTE INT,
	@ID_EMPRESA INT,
	@ITEM_PAGO NUMERIC(18,2),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT,
	@NRO_PAGO NUMERIC(18,0) OUTPUT
AS
BEGIN

	
	--VALIDACIONES--
	IF(@FECHA IS NULL) -- VALIDA EL INGRESO DE UNA FECHA
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una fecha de pago de facturas';
		RETURN
	END

	IF(@TOTAL IS NULL)-- VALIDA EL INGRESO DEL TOTAL
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el total del importe pagado';
		RETURN
	END


	IF(@ID_FORMA_PAGO IS NULL)-- VALIDA EL INGRESO DE LA FORMA DE PAGO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el medio de pago de la factura';
		RETURN
	END

		IF(@ID_SUCURSAL IS NULL)-- VALIDA EL INGRESO DE LA SUCURSAL
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar la sucursal donde se efectua el pago';
		RETURN
	END

		IF(@ID_CLIENTE IS NULL)-- VALIDA EL INGRESO DEL CLIENTE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el cliente que efectua el pago';
		RETURN
	END

	IF(@ID_EMPRESA IS NULL)-- VALIDA EL INGRESO DEL CLIENTE
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar la empresa a la que se le efectua el pago';
		RETURN
	END

	IF(@ITEM_PAGO IS NULL)-- VALIDA EL INGRESO DEL ITEM DE PAGO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el item de pago de la factura';
		RETURN
	END

	--PROCEDIMIENTO--
			
	INSERT INTO SUBSELECT.PAGO
	(NRO_PAGO,FECHA,TOTAL,ID_FORMA_PAGO,ID_SUCURSAL,ID_CLIENTE,ID_EMPRESA,ITEM_PAGO)	
	VALUES
		(NEXT VALUE FOR SUBSELECT.ITEM_PAGO_SEQ ,@FECHA,@TOTAL,@ID_FORMA_PAGO,@ID_SUCURSAL
				,@ID_CLIENTE,@ID_EMPRESA, @ITEM_PAGO);

	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'El pago se realizo correctamente';

	SET @NRO_PAGO = CONVERT (NUMERIC(18,0),(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='ITEM_PAGO_SEQ'));
END

GO

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_PAGO_FACTURA_ALTA
	@NRO_PAGO NUMERIC(18,0),
	@NRO_FACTURA NUMERIC(18,0),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN

	
	--VALIDACIONES--
	IF(@NRO_PAGO IS NULL) 
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un nro de pago';
		RETURN
	END

	IF(@NRO_FACTURA IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un numero de factura';
		RETURN
	END


	--PROCEDIMIENTO--
			
	INSERT INTO SUBSELECT.PAGO_FACTURAS
	(NRO_PAGO,NRO_FACTURA)	
	VALUES
		(@NRO_PAGO,@NRO_FACTURA);
	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'Se asocio el pago a la factura';
END

GO

GO
CREATE PROCEDURE SUBSELECT.GET_PAGO
@NRO_PAGO NUMERIC(18,0)
AS
BEGIN
	IF(@NRO_PAGO  IS NULL)
	BEGIN
		RETURN
	END
	SELECT * FROM SUBSELECT.PAGO P, SUBSELECT.PAGO_FACTURAS PF , SUBSELECT.FACTURA F
		WHERE P.NRO_PAGO = @NRO_PAGO AND P.NRO_PAGO = PF.NRO_PAGO AND PF.NRO_FACTURA = F.NRO_FACTURA;
END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_FORMAS_PAGO
AS
BEGIN
	SELECT * FROM SUBSELECT.FORMA_PAGO;	
END
GO

GO
CREATE PROCEDURE SUBSELECT.SP_ABM_RENDICION_ALTA
	@FECHA_RENDICION DATETIME,
	@ID_EMPRESA INT,
	@ITEM NUMERIC(18,0),
	@PORCENTAJE NUMERIC(5,2),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT,
	@NRO_RENDICION NUMERIC(18,0) OUTPUT
AS
BEGIN
	DECLARE @ID_RENDICION INT;
	DECLARE @CANT_REGISTROS INT;

	DECLARE @FACTURAS_A_RENDIR TABLE
	(
		NRO_FACTURA NUMERIC(18,2),
		TOTAL NUMERIC(18,2)
	);

	--VALIDACIONES--
	IF(@FECHA_RENDICION IS NULL)  -- VALIDA EL INGRESO DE UNA FECHA OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar la fecha de la rendicion';
		RETURN
	END

	IF(@ID_EMPRESA IS NULL) -- VALIDA EL INGRESO DE UNA EMPRESA OBLIGATORIO
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar una empresa para la rendicion';
		RETURN
	END


	IF(@ITEM IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar un item para dar de alta la rendicion';
		RETURN
	END

	IF(@PORCENTAJE IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el porcentaje que se cobra de la rendicion';
		RETURN
	END
	
	SELECT   @CANT_REGISTROS = COUNT(*) FROM SUBSELECT.REDENCION R 
		WHERE R.ID_EMPRESA = @ID_EMPRESA AND EOMONTH(R.FECHA_REDENCION) = EOMONTH(@FECHA_RENDICION) 

	IF (@CANT_REGISTROS > 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Ya se realizo rendicion para este mes';
		RETURN
	END

	--PROCEDIMIENTO--
		
	--REVISAR
	INSERT INTO @FACTURAS_A_RENDIR
	(NRO_FACTURA,TOTAL)	
	SELECT  F.NRO_FACTURA, F.TOTAL FROM SUBSELECT.FACTURA F, SUBSELECT.PAGO_FACTURAS PF, SUBSELECT.PAGO P
		WHERE F.NRO_FACTURA =  PF.NRO_FACTURA AND P.NRO_PAGO = PF.NRO_PAGO AND F.ID_EMPRESA = @ID_EMPRESA 
		AND P.FECHA < @FECHA_RENDICION
		AND NOT EXISTS(SELECT * FROM SUBSELECT.REDENCION_FACTURA RF WHERE F.NRO_FACTURA = RF.NRO_FACTURA);

	IF(NOT EXISTS (SELECT 1 FROM @FACTURAS_A_RENDIR ))
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No se realizaron pagos de facturas para la empresa desde la ultima rendicion';
		RETURN
	END

	INSERT INTO SUBSELECT.REDENCION
	(NRO_REDENCION,FECHA_REDENCION,ID_EMPRESA,ITEM,TOTAL,PORCENTAJE,COMISION,CANTIDAD)
	VALUES
		(NEXT VALUE FOR SUBSELECT.REDENCION_SEQ, @FECHA_RENDICION,@ID_EMPRESA,@ITEM
			,(SELECT SUM(TOTAL) FROM @FACTURAS_A_RENDIR),@PORCENTAJE,(SELECT SUM(TOTAL) FROM @FACTURAS_A_RENDIR) * @PORCENTAJE
			,(SELECT COUNT(*) FROM @FACTURAS_A_RENDIR));

	SET @ID_RENDICION = CONVERT (NUMERIC(18,0),(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='REDENCION_SEQ'));
	SET @NRO_RENDICION = @ID_RENDICION;
	INSERT INTO SUBSELECT.REDENCION_FACTURA
	(NRO_REDENCION,NRO_FACTURA)
	SELECT @ID_RENDICION, F.NRO_FACTURA FROM @FACTURAS_A_RENDIR F

	SET @FLAG_ERROR = 0;
	SET @MENSAJE = 'Se realizo la rendicion correctamente';
END

GO


CREATE PROCEDURE SUBSELECT.DEVOLUCION_FACTURAS_PAGADAS
	@NRO_FACTURA NUMERIC(18,0),
	@MOTIVO VARCHAR(255),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	DECLARE @ID_DEVOLUCION INT;

		
	DECLARE @FACTURA_DEVOLVER TABLE
	(
		NRO_PAGO NUMERIC(18,0),
		NRO_FACTURA NUMERIC(18,0),
		TOTAL NUMERIC(18,2)
	);
	
	--VALIDACIONES--
	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.FACTURA AS F
	WHERE F.NRO_FACTURA = @NRO_FACTURA;
	SET @FLAG_ERROR = 0;
	IF(@NRO_FACTURA IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La factura que quiere devolver no existe.';
		RETURN
	END

		IF(@MOTIVO IS NULL)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el motivo por el que se devuelve la factura.';
		RETURN
	END

	SELECT @CANT_REGISTROS = COUNT(*) FROM 
		SUBSELECT.REDENCION_FACTURA RF 
		WHERE RF.NRO_FACTURA = @NRO_FACTURA 

	IF(@CANT_REGISTROS > 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'No se puede devolver una factura rendida.';
		RETURN
	END

	INSERT INTO @FACTURA_DEVOLVER
	(NRO_PAGO, NRO_FACTURA,TOTAL)
	(SELECT P.NRO_PAGO,F.NRO_FACTURA, (P.TOTAL - F.TOTAL ) FROM SUBSELECT.FACTURA F , SUBSELECT.PAGO P, SUBSELECT.PAGO_FACTURAS PF 
		WHERE  F.NRO_FACTURA = @NRO_FACTURA AND PF.NRO_FACTURA = F.NRO_FACTURA AND PF.NRO_PAGO = P.NRO_PAGO);

	INSERT INTO SUBSELECT.DEVOLUCION
	(ID_DEVOLUCION,MOTIVO)
	VALUES
	(NEXT VALUE FOR SUBSELECT.DEVOLUION_SEQ,@MOTIVO);
	
	SET @ID_DEVOLUCION = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='DEVOLUION_SEQ'));

	INSERT INTO SUBSELECT.DEVOLUCION_FACTURA
	(ID_DEVOLUCION, NRO_FACTURA)
	VALUES
	(@ID_DEVOLUCION,@NRO_FACTURA);

	UPDATE SUBSELECT.PAGO
		SET TOTAL = (SELECT  TOTAL FROM @FACTURA_DEVOLVER )
	WHERE  NRO_PAGO = (SELECT  NRO_PAGO FROM @FACTURA_DEVOLVER ) ;

	DELETE FROM SUBSELECT.PAGO_FACTURAS
		WHERE NRO_FACTURA = @NRO_FACTURA;

	SET @FLAG_ERROR = 0;
		SET @MENSAJE = 'Factura dvuelta correctamente.';
		RETURN
END
GO


CREATE PROCEDURE SUBSELECT.DEVOLUCION_RENDICION
	@NRO_RENDICION NUMERIC(18,0),
	@MOTIVO VARCHAR(255),
	@FLAG_ERROR BIT OUTPUT,
	@MENSAJE VARCHAR(255) OUTPUT
AS
BEGIN
	--DECLARACIONES--
	DECLARE @CANT_REGISTROS INT;
	DECLARE @ID_DEVOLUCION INT;

	SELECT @CANT_REGISTROS = COUNT(*) FROM
	SUBSELECT.REDENCION AS R
	WHERE R.NRO_REDENCION = @NRO_RENDICION;
	SET @FLAG_ERROR = 0;
	IF(@NRO_RENDICION IS NULL) OR (@CANT_REGISTROS = 0)
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'La rendicion que quiere devolver no existe.';
		RETURN
	END

	IF(@MOTIVO IS NULL OR @MOTIVO = '')
	BEGIN
		SET @FLAG_ERROR = 1;
		SET @MENSAJE = 'Debe ingresar el motivo por el que se devuelve la rendicion.';
		RETURN
	END

	INSERT INTO SUBSELECT.DEVOLUCION
	(ID_DEVOLUCION,MOTIVO)
	VALUES
	(NEXT VALUE FOR SUBSELECT.DEVOLUION_SEQ,@MOTIVO);
	
	SET @ID_DEVOLUCION = CONVERT (INT,(SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE [NAME]='DEVOLUION_SEQ'));

	INSERT INTO SUBSELECT.DEVOLUCION_REDENCION
	(ID_DEVOLUCION, NRO_REDENCION)
	VALUES
	(@ID_DEVOLUCION,@NRO_RENDICION);

	DELETE FROM SUBSELECT.REDENCION_FACTURA
		WHERE NRO_REDENCION = @NRO_RENDICION;

END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_LISTADO_1
@ANO VARCHAR(4),
@MES_INI VARCHAR(3),
@MES_FIN VARCHAR(3)
AS
BEGIN

	DECLARE @FACTURAS_COBRADAS TABLE
	(
		ID_EMPRESA INT,
		NOMBRE VARCHAR(255),
		CUIT VARCHAR(50),
		CANTIDAD NUMERIC(18,2)
	);

	DECLARE @FACTURAS_NO_COBRADAS TABLE
	(
		ID_EMPRESA INT,
		CANTIDAD NUMERIC(18,2)
	);

	IF(@ANO  IS NULL)
	BEGIN
		SET @ANO = '';
	END

	IF(@MES_INI IS NULL)
	BEGIN
		SET @MES_INI = '';
	END

		IF(@MES_FIN  IS NULL)
	BEGIN
		SET @MES_FIN = '';
	END

	INSERT INTO @FACTURAS_COBRADAS
	(ID_EMPRESA,NOMBRE,CUIT,CANTIDAD)
	SELECT E.ID_EMPRESA, E.NOMBRE, E.CUIT, COUNT(*) CANTIDAD FROM SUBSELECT.FACTURA F, SUBSELECT.EMPRESA E, SUBSELECT.PAGO_FACTURAS PF
	WHERE E.ID_EMPRESA = F.ID_EMPRESA 
	AND F.NRO_FACTURA = PF.NRO_FACTURA AND
		DATEPART(YEAR ,F.FECHA) =@ANO AND
		DATEPART(MONTH ,F.FECHA) BETWEEN @MES_INI AND @MES_FIN
	GROUP BY E.NOMBRE, E.CUIT, E.ID_EMPRESA

	INSERT INTO @FACTURAS_NO_COBRADAS
	(ID_EMPRESA,CANTIDAD)
	SELECT  E.ID_EMPRESA, COUNT(*) CANTIDAD FROM SUBSELECT.FACTURA F, SUBSELECT.EMPRESA E
	WHERE E.ID_EMPRESA = F.ID_EMPRESA AND
		DATEPART(YEAR ,F.FECHA) =@ANO AND
		DATEPART(MONTH ,F.FECHA) BETWEEN @MES_INI AND @MES_FIN 
	GROUP BY E.ID_EMPRESA

	
	SELECT TOP 5 FC.NOMBRE, FC.CUIT , (FC.CANTIDAD / FN.CANTIDAD * 100) TOTAL FROM @FACTURAS_COBRADAS FC , @FACTURAS_NO_COBRADAS FN
	WHERE  FC.ID_EMPRESA = FN.ID_EMPRESA
	ORDER BY TOTAL DESC
END
GO


GO

CREATE PROCEDURE SUBSELECT.GET_LISTADO_2
@ANO VARCHAR(4),
@MES_INI VARCHAR(3),
@MES_FIN VARCHAR(3)
AS
BEGIN

	IF(@ANO  IS NULL)
	BEGIN
		SET @ANO = '';
	END

	IF(@MES_INI IS NULL)
	BEGIN
		SET @MES_INI = '';
	END

		IF(@MES_FIN  IS NULL)
	BEGIN
		SET @MES_FIN = '';
	END
	
	SELECT TOP 5 E.NOMBRE, E.CUIT, MAX(R.TOTAL) MAXIMA FROM SUBSELECT.EMPRESA E, SUBSELECT.REDENCION R ,SUBSELECT.REDENCION_FACTURA RF
	WHERE R.ID_EMPRESA = R.ID_EMPRESA AND RF.NRO_REDENCION = R.NRO_REDENCION AND
		DATEPART(YEAR ,R.FECHA_REDENCION) =@ANO AND
		DATEPART(MONTH ,R.FECHA_REDENCION) BETWEEN @MES_INI AND @MES_FIN 
	GROUP BY E.NOMBRE, E.CUIT
	ORDER BY MAXIMA DESC 
		
END
GO


GO

CREATE PROCEDURE SUBSELECT.GET_LISTADO_3
@ANO VARCHAR(4),
@MES_INI VARCHAR(3),
@MES_FIN VARCHAR(3)
AS
BEGIN

	IF(@ANO  IS NULL)
	BEGIN
		SET @ANO = '';
	END

	IF(@MES_INI IS NULL)
	BEGIN
		SET @MES_INI = '';
	END

		IF(@MES_FIN  IS NULL)
	BEGIN
		SET @MES_FIN = '';
	END
	
SELECT TOP 5 C.NOMBRE, C.APELLIDO, C.DNI, COUNT(*) CANTIDAD FROM SUBSELECT.CLIENTE C, SUBSELECT.PAGO P, SUBSELECT.PAGO_FACTURAS PF
	WHERE C.ID_CLIENTE = P.ID_CLIENTE AND P.NRO_PAGO = PF.NRO_PAGO AND
		DATEPART(YEAR ,P.FECHA) =@ANO AND
		DATEPART(MONTH ,P.FECHA) BETWEEN @MES_INI AND @MES_FIN 
	GROUP BY C.NOMBRE, C.APELLIDO, C.DNI 
	ORDER BY CANTIDAD DESC 	
	
END
GO

GO

CREATE PROCEDURE SUBSELECT.GET_LISTADO_4
@ANO VARCHAR(4),
@MES_INI VARCHAR(3),
@MES_FIN VARCHAR(3)
AS
BEGIN

	DECLARE @FACTURAS_COBRADAS TABLE
	(
		ID_CLIENTE INT,
		NOMBRE VARCHAR(255),
		APELLIDO VARCHAR(255),
		DNI NUMERIC (18,0),
		CANTIDAD NUMERIC(18,2));

	DECLARE @FACTURAS_NO_COBRADAS TABLE
	(
		ID_CLIENTE INT,
		CANTIDAD NUMERIC(18,2)
	);

	IF(@ANO  IS NULL)
	BEGIN
		SET @ANO = '';
	END

	IF(@MES_INI IS NULL)
	BEGIN
		SET @MES_INI = '';
	END

		IF(@MES_FIN  IS NULL)
	BEGIN
		SET @MES_FIN = '';
	END

	INSERT INTO @FACTURAS_COBRADAS
	(ID_CLIENTE,NOMBRE,APELLIDO,DNI,CANTIDAD)
	SELECT TOP 5 C.ID_CLIENTE,C.NOMBRE, C.APELLIDO, C.DNI, COUNT(*) CANTIDAD FROM SUBSELECT.FACTURA F, SUBSELECT.CLIENTE C,SUBSELECT.PAGO_FACTURAS PF
	WHERE C.ID_CLIENTE = F.ID_CLIENTE AND F.NRO_FACTURA = PF.NRO_FACTURA AND
		DATEPART(YEAR ,F.FECHA) =@ANO AND
		DATEPART(MONTH ,F.FECHA) BETWEEN @MES_INI AND @MES_FIN 
		GROUP BY C.NOMBRE, C.APELLIDO, C.DNI,C.ID_CLIENTE

	INSERT INTO @FACTURAS_NO_COBRADAS
	(ID_CLIENTE,CANTIDAD)
	SELECT  C.ID_CLIENTE, COUNT(*) CANTIDAD FROM SUBSELECT.FACTURA F, SUBSELECT.CLIENTE C
	WHERE C.ID_CLIENTE = F.ID_CLIENTE AND
		DATEPART(YEAR ,F.FECHA) =@ANO AND
		DATEPART(MONTH ,F.FECHA) BETWEEN @MES_INI AND @MES_FIN 
	GROUP BY C.ID_CLIENTE

	SELECT TOP 5 FC.NOMBRE,FC.APELLIDO, FC.DNI , (FC.CANTIDAD / FN.CANTIDAD * 100) TOTAL FROM @FACTURAS_COBRADAS FC , @FACTURAS_NO_COBRADAS FN
	WHERE  FC.ID_CLIENTE = FN.ID_CLIENTE
	ORDER BY TOTAL DESC
END
GO

CREATE PROCEDURE SUBSELECT.GET_RUBROS
AS
BEGIN
	SELECT * FROM SUBSELECT.RUBRO		
END
GO


CREATE PROCEDURE SUBSELECT.GET_RENDICIONES
AS
BEGIN
	SELECT 
		R.NRO_REDENCION,
		R.FECHA_REDENCION,
		R.ID_EMPRESA
	FROM SUBSELECT.REDENCION R
END